import requests
import json
import time
import argparse
from concurrent.futures import ThreadPoolExecutor
from tqdm import tqdm
from collections import defaultdict
from typing import Dict, List, Optional, Set
from datetime import datetime
import sys
import os

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
API_BASE_URL = "https://api.kinopoisk.dev/v1.4"
API_GENRES_URL = f"{API_BASE_URL}/movie/possible-values-by-field?field=genres.name"
API_MOVIES_URL = f"{API_BASE_URL}/movie"
MAX_REQUESTS_PER_KEY = 5
REQUEST_DELAY = 0.5
DEFAULT_LIMIT = 250

# –°–ø–∏—Å–æ–∫ API-–∫–ª—é—á–µ–π
API_KEYS = [
    "YZXC9V2-8FMMZFR-P1W7JS7-B8W6JM2",
    "DKVQN04-29V44MD-JRSKAYM-7G1B8XP",
    "SRQBFFF-ZWD4J9Y-HE99ABA-45YDAHM",
    "GR9DGVD-FDZ45MK-G9P976P-K5TEJB0",
    "7QJJV3T-A2T4KR0-KTDFZJM-J13T7NX",
    "AZ94M48-EM344YZ-P2JB02A-40VX0EY",
    "PJVA2E4-P1QMS61-JFG04QA-FG6Y0WA",
    "B3JZFMX-1A8MR6J-HWV0XEF-3S3FPVQ",
    "NFA6FC2-38B4QSX-PS2GVCQ-HCQBQ8R",
]

def get_movies_by_genre(
    genre: str,
    max_pages: int,
    limit: int = DEFAULT_LIMIT,
    api_key_index: int = 0,
    progress_bar: Optional[tqdm] = None
) -> List[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ñ–∏–ª—å–º—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∂–∞–Ω—Ä—É.
    
    Args:
        genre: –ù–∞–∑–≤–∞–Ω–∏–µ –∂–∞–Ω—Ä–∞
        max_pages: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        api_key_index: –ò–Ω–¥–µ–∫—Å API –∫–ª—é—á–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        progress_bar: –û–±—ä–µ–∫—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    
    Returns:
        List[Dict]: –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤
    """
    url = API_MOVIES_URL
    headers = {
        "accept": "application/json",
        "X-API-KEY": API_KEYS[api_key_index]
    }
    movies = []
    
    for page in range(1, max_pages + 1):
        try:
            params = {
                "page": page,
                "limit": limit,
                "genres.name": genre,
                "year": "!2025",
                "notNullFields": "description"
            }
            response = requests.get(url, headers=headers, params=params)
            response.raise_for_status()
            
            data = response.json()["docs"]
            movies.extend(data)
            
            if progress_bar:
                progress_bar.update(1)
                
        except requests.exceptions.RequestException as e:
            print(f"[API-{api_key_index}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –∂–∞–Ω—Ä–∞ {genre} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}: {e}")
            break
        except json.JSONDecodeError as e:
            print(f"[API-{api_key_index}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON –¥–ª—è –∂–∞–Ω—Ä–∞ {genre} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}: {e}")
            break
            
        time.sleep(REQUEST_DELAY)
    
    return movies

def get_all_genres() -> List[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤.
    
    Returns:
        List[Dict]: –°–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤
    """
    headers = {
        "accept": "application/json",
        "X-API-KEY": API_KEYS[0]
    }
    
    try:
        response = requests.get(API_GENRES_URL, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∂–∞–Ω—Ä–æ–≤: {e}")
        return []
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON —Å–ø–∏—Å–∫–∞ –∂–∞–Ω—Ä–æ–≤: {e}")
        return []

def fetch_movies_parallel(genres, max_pages=150, limit=250):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –≤—Å–µ–º –∂–∞–Ω—Ä–∞–º.
    
    Args:
        genres: –°–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤
        max_pages: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∂–∞–Ω—Ä–∞
        limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
    Returns:
        Dict: –°–ª–æ–≤–∞—Ä—å —Å —Ñ–∏–ª—å–º–∞–º–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ –∂–∞–Ω—Ä–∞–º
    """
    all_movies = {}
    total_pages = len(genres) * max_pages  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –≤—Å–µ—Ö –∂–∞–Ω—Ä–æ–≤
    with tqdm(total=total_pages, desc="–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü", unit="—Å—Ç—Ä.") as progress_bar:
        with ThreadPoolExecutor(max_workers=len(API_KEYS)) as executor:
            # –ù–∞–∑–Ω–∞—á–∞–µ–º API-–∫–ª—é—á–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
            future_to_genre = {
                executor.submit(get_movies_by_genre, genre["name"], max_pages, limit, idx % len(API_KEYS), progress_bar): genre["name"]
                for idx, genre in enumerate(genres)
            }
            for future in future_to_genre:
                genre_name = future_to_genre[future]
                try:
                    movies = future.result()
                    if genre_name in all_movies:
                        # –ï—Å–ª–∏ –∂–∞–Ω—Ä —É–∂–µ –µ—Å—Ç—å, –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ–∏–ª—å–º—ã, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                        existing_ids = {movie["id"] for movie in all_movies[genre_name]}
                        new_movies = [movie for movie in movies if movie["id"] not in existing_ids]
                        all_movies[genre_name].extend(new_movies)
                    else:
                        all_movies[genre_name] = movies
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∂–∞–Ω—Ä–∞ {genre_name}: {e}")
    return all_movies

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
    """
    parser = argparse.ArgumentParser(
        description='–ü–∞—Ä—Å–µ—Ä —Ñ–∏–ª—å–º–æ–≤ —Å –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞',
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument(
        '--mode',
        choices=['fetch', 'clean', 'all'],
        default='all',
        help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: fetch - —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, clean - —Ç–æ–ª—å–∫–æ –æ—á–∏—Å—Ç–∫–∞, all - –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª'
    )
    
    parser.add_argument(
        '--output',
        default=f'data/movies_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json',
        help='–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É'
    )
    
    parser.add_argument(
        '--input',
        help='–ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É –¥–ª—è —Ä–µ–∂–∏–º–∞ clean'
    )
    
    parser.add_argument(
        '--max-pages',
        type=int,
        default=150,
        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∂–∞–Ω—Ä–∞'
    )
    
    parser.add_argument(
        '--limit',
        type=int,
        default=250,
        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ'
    )
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('data', exist_ok=True)
    
    try:
        if args.mode in ['fetch', 'all']:
            print("\nüé¨ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞...")
            print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")
            print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ –∂–∞–Ω—Ä: {args.max_pages}")
            print(f"   ‚Ä¢ –§–∏–ª—å–º–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {args.limit}")
            print(f"   ‚Ä¢ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {args.output}")
            
            genres = get_all_genres()
            if not genres:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤")
                sys.exit(1)
                
            print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ –∂–∞–Ω—Ä–æ–≤: {len(genres)}")
            data = fetch_movies_parallel(genres, max_pages=args.max_pages, limit=args.limit)
            
            if args.mode == 'fetch':
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                with open(args.output, 'w', encoding='utf-8') as f:
                    json.dump(data, f, ensure_ascii=False, indent=2)
                print(f"\n‚úÖ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {args.output}")
                return
        
        if args.mode in ['clean', 'all']:
            print("\nüßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            input_file = args.input if args.mode == 'clean' else args.output
            
            try:
                with open(input_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
            except FileNotFoundError:
                print(f"‚ùå –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                sys.exit(1)
            except json.JSONDecodeError:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON –∏–∑ —Ñ–∞–π–ª–∞ {input_file}")
                sys.exit(1)
            
            remove_duplicates_and_invalid(data, args.output)
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 