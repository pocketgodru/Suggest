from flask import Flask, request, jsonify
import os
from dotenv import load_dotenv
import numpy as np
from pymongo import MongoClient
from sentence_transformers import SentenceTransformer
from sklearn.preprocessing import normalize
import faiss
from time import time
import re
import torch
import hashlib
from functools import lru_cache
import logging
from flask_cors import CORS

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ CPU
os.environ["CUDA_VISIBLE_DEVICES"] = ""
torch.set_num_threads(1)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è CPU

app = Flask(__name__)
CORS(app)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ TurboMovieSearch
_turbo_movie_search_instance = None

class TurboMovieSearch:
    def __init__(self):
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ MongoDB –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        mongo_uri = os.getenv("MONGO_URI", "mongodb://127.0.0.1:27017")
        mongo_db = os.getenv("MONGO_DB", "movies_db")
        mongo_collection = os.getenv("MONGO_COLLECTION", "movies")
        
        logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB: {mongo_uri}, –ë–î: {mongo_db}, –ö–æ–ª–ª–µ–∫—Ü–∏—è: {mongo_collection}")
        
        self.client = MongoClient(mongo_uri)
        self.db = self.client[mongo_db]
        self.collection = self.db[mongo_collection]

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MongoDB
        self.metadata = self._load_metadata()
        self.embeddings = self._load_or_generate_embeddings()

        # FAISS Index
        self.index = faiss.IndexFlatL2(self.embeddings.shape[1])
        self.index.add(self.embeddings)

        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥—Ä—É–≥–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        device = "cpu"
        logger.info(f"üñ• –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        model_name = "intfloat/multilingual-e5-large-instruct"
        cache_folder = "model_cache"
        
        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏: {model_name} –∏–∑ {cache_folder}")
        
        self.model = SentenceTransformer(
            model_name,
            device=device,
            cache_folder=cache_folder
        )

        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∂–∞–Ω—Ä–∞–º –∏ –≥–æ–¥–∞–º
        self._precompute_features()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        self.search_cache = {}
        self.cache_hits = 0
        self.total_searches = 0
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.movie_count = len(self.metadata)
        
        logger.info("‚úÖ –ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

    def _load_metadata(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∏–ª—å–º—ã –∏–∑ MongoDB"""
        movies = list(self.collection.find({}, {"_id": 0}))
        logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(movies)} —Ñ–∏–ª—å–º–æ–≤ –∏–∑ MongoDB")
        return movies

    def _load_or_generate_embeddings(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ —Ñ–∏–ª—å–º–æ–≤"""
        try:
            embeddings_file = os.getenv("EMBEDDINGS_FILE", "movies_embeddings.npy")
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {embeddings_file}")
            
            embeddings = np.load(embeddings_file, mmap_mode='r')
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ–∏–ª—å–º–æ–≤
            if len(self.metadata) > 0 and len(embeddings) == len(self.metadata):
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è {len(embeddings)} —Ñ–∏–ª—å–º–æ–≤")
                return embeddings
            elif len(self.metadata) == 0:
                # –ï—Å–ª–∏ –≤ MongoDB –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤, –Ω–æ –µ—Å—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
                logger.warning(f"‚ö†Ô∏è –í MongoDB –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤, –Ω–æ –Ω–∞–π–¥–µ–Ω—ã —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è {len(embeddings)} —Ñ–∏–ª—å–º–æ–≤")
                # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
                self.metadata = [{"name": f"–ü—Ä–∏–º–µ—Ä —Ñ–∏–ª—å–º–∞ {i}", "year": 2022} for i in range(len(embeddings))]
                self.movie_count = len(self.metadata)
                logger.info(f"üì• –°–æ–∑–¥–∞–Ω–æ {len(self.metadata)} —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
                return embeddings
            else:
                logger.warning(f"‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ ({len(embeddings)}) –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ–∏–ª—å–º–æ–≤ ({len(self.metadata)}). –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ.")
                return self._generate_embeddings()
        except (FileNotFoundError, IndexError) as e:
            logger.warning(f"üõ† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {str(e)}. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏...")
            return self._generate_embeddings()
    
    def _generate_embeddings(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å–º–æ–≤"""
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤, —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        if len(self.metadata) == 0:
            logger.warning("‚ùå –ù–µ—Ç —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤. –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö.")
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –æ–¥–∏–Ω —Ñ–∏–ª—å–º —Å –Ω—É–ª–µ–≤—ã–º —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ 384 (–∫–∞–∫ —É –º–æ–¥–µ–ª–∏ MiniLM-L12)
            dummy_embeddings = np.zeros((1, 384), dtype=np.float32)
            self.metadata = [{"name": "–ü—Ä–∏–º–µ—Ä —Ñ–∏–ª—å–º–∞", "year": 2022}]
            self.movie_count = 1
            logger.info("üì• –°–æ–∑–¥–∞–Ω –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
            return dummy_embeddings
            
        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU
        device = "cpu"
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        texts = []
        for movie in self.metadata:
            name = movie["name"]
            description = movie.get("description", "")
            short_description = movie.get("shortDescription", "")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            if description:
                text = f"{name}. {description}"
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            elif short_description:
                text = f"{name}. {short_description}"
            # –ï—Å–ª–∏ –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
            else:
                text = name
                
            texts.append(text)
        
        logger.info(f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è {len(texts)} —Ñ–∏–ª—å–º–æ–≤...")
        model = SentenceTransformer("intfloat/multilingual-e5-large-instruct",
                                    device=device,
                                    cache_folder='model_cache')
        embeddings = model.encode(
            texts, 
            convert_to_numpy=True, 
            normalize_embeddings=True, 
            batch_size=64, 
            show_progress_bar=True
        )
        
        embeddings_file = os.getenv("EMBEDDINGS_FILE", "movies_embeddings.npy")
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –≤ —Ñ–∞–π–ª: {embeddings_file}")
        np.save(embeddings_file, embeddings)
        return embeddings

    def _precompute_features(self):
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏"""
        years = np.array([item.get('year', 2000) for item in self.metadata], dtype=np.float32)
        self.norm_years = (years - years.min()) / (years.max() - years.min()) if years.max() > years.min() else years

        self.genre_index = {}
        for idx, item in enumerate(self.metadata):
            for genre in item.get('genres', []):
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –∂–∞–Ω—Ä –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª–µ–º 'name'
                if isinstance(genre, dict) and 'name' in genre:
                    genre_name = genre['name']
                else:
                    genre_name = genre
                
                if genre_name not in self.genre_index:
                    self.genre_index[genre_name] = []
                self.genre_index[genre_name].append(idx)

        self.embeddings = normalize(self.embeddings)
    
    def _get_cache_key(self, query, year_filter, genre_filter):
        """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        key = f"{query}|{year_filter}|{genre_filter}"
        return hashlib.md5(key.encode()).hexdigest()
    
    def check_for_updates(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        current_movies = list(self.collection.find({}, {"_id": 0}))
        current_count = len(current_movies)
        
        if current_count > self.movie_count:
            logger.info(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã! –ë—ã–ª–æ: {self.movie_count}, —Å—Ç–∞–ª–æ: {current_count}")
            self.metadata = current_movies
            self.movie_count = current_count
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
            self.embeddings = self._generate_embeddings()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º FAISS –∏–Ω–¥–µ–∫—Å
            self.index = faiss.IndexFlatL2(self.embeddings.shape[1])
            self.index.add(self.embeddings)
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            self._precompute_features()
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à
            self.search_cache.clear()
            self.cache_hits = 0
            self.total_searches = 0
            
            logger.info("‚úÖ –ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            return True
        
        return False

    def search(self, query, top_k=10, year_filter=None, genre_filter=None):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤
        
        Args:
            query: –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
            top_k: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            year_filter: –ì–æ–¥ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            genre_filter: –ñ–∞–Ω—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å—É
        """
        start_time = time()
        self.total_searches += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã
        self.check_for_updates()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = self._get_cache_key(query, year_filter, genre_filter)
        if cache_key in self.search_cache:
            self.cache_hits += 1
            hit_rate = (self.cache_hits / self.total_searches) * 100
            logger.info(f"üîç –ö—ç—à-—Ö–∏—Ç! ({self.cache_hits}/{self.total_searches}, {hit_rate:.1f}%)")
            return self.search_cache[cache_key]

        clean_query, year_boost, genres = self._parse_query(query)

        if year_filter:
            year_boost = (int(year_filter) - 1900) / 125
        if genre_filter:
            genres.append(genre_filter.lower())

        query_embedding = self.model.encode(
            clean_query,
            convert_to_numpy=True,
            normalize_embeddings=True
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-N —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–º—É —Å—Ö–æ–¥—Å—Ç–≤—É
        faiss_top_k = min(100, len(self.metadata))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        
        text_scores = np.dot(self.embeddings, query_embedding.T).flatten()
        year_scores = np.zeros_like(text_scores)
        genre_scores = np.zeros_like(text_scores)

        if year_boost is not None:
            year_scores = 1.0 - np.abs(self.norm_years - year_boost)

        if genres:
            for genre in genres:
                genre_key = genre
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∂–∞–Ω—Ä –Ω–∞–ø—Ä—è–º—É—é, –∏—â–µ–º –µ–≥–æ –≤ –∫–ª—é—á–∞—Ö —Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞
                if genre_key not in self.genre_index:
                    for key in self.genre_index.keys():
                        if key.lower() == genre.lower():
                            genre_key = key
                            break
                
                if genre_key in self.genre_index:
                    genre_scores[self.genre_index[genre_key]] += 0.1

        total_scores = 0.85 * text_scores + 0.05 * year_scores + 0.1 * genre_scores

        indices = np.argpartition(total_scores, -faiss_top_k)[-faiss_top_k:]
        best_indices = indices[np.argsort(-total_scores[indices])]

        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = []
        for idx in best_indices:
            if total_scores[idx] > 0.1:  # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                results.append(self.metadata[idx])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                results[-1]["relevance_score"] = float(total_scores[idx])
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if len(results) >= top_k:
                    break
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à
        self.search_cache[cache_key] = results
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞ (–º–∞–∫—Å–∏–º—É–º 1000 –∑–∞–ø—Ä–æ—Å–æ–≤)
        if len(self.search_cache) > 1000:
            # –£–¥–∞–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á
            random_key = next(iter(self.search_cache))
            del self.search_cache[random_key]

        logger.info(f"‚è± –ü–æ–∏—Å–∫ –∑–∞ {time() - start_time:.2f}s | –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ñ–∏–ª—å–º–æ–≤")
        return results

    def _parse_query(self, query):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
        year_match = re.search(r'\b(19\d{2}|20[0-2]\d)\b', query)
        year_boost = None
        if year_match:
            year = int(year_match.group())
            year_boost = (year - 1900) / 125

        genres = []
        for genre in self.genre_index.keys():
            # –ù–∞–º –Ω–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–ª–æ–≤–∞—Ä–∏ genres, —Ç.–∫. self.genre_index —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫–∏
            if isinstance(genre, str) and re.search(r'\b' + re.escape(genre) + r'\b', query, re.IGNORECASE):
                genres.append(genre)

        clean_query = query
        return clean_query, year_boost, genres

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ TurboMovieSearch (Singleton)
def get_turbo_movie_search_instance():
    global _turbo_movie_search_instance
    if _turbo_movie_search_instance is None:
        _turbo_movie_search_instance = TurboMovieSearch()
    return _turbo_movie_search_instance

# API –º–∞—Ä—à—Ä—É—Ç—ã

@app.route("/health")
def health_check():
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞.
    –ù–µ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TurboMovieSearch.
    """
    return jsonify({"status": "ok", "service": "search-service"}), 200

@app.route("/search")
def search_api():
    """API –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤"""
    try:
        query = request.args.get("query", "")
        year_filter = request.args.get("year")
        genre_filter = request.args.get("genre")
        top_k = request.args.get("limit", 10, type=int)
        
        if not query:
            return jsonify([])
        
        searcher = get_turbo_movie_search_instance()
        results = searcher.search(query, top_k=top_k, year_filter=year_filter, genre_filter=genre_filter)
        
        return jsonify(results)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/status")
def status():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        searcher = get_turbo_movie_search_instance()
        
        status_info = {
            "movies_count": searcher.movie_count,
            "cache_size": len(searcher.search_cache),
            "cache_hit_rate": f"{(searcher.cache_hits / searcher.total_searches * 100):.1f}%" if searcher.total_searches > 0 else "0.0%",
            "total_searches": searcher.total_searches,
            "embeddings_shape": list(searcher.embeddings.shape),
            "genres_count": len(searcher.genre_index)
        }
        
        return jsonify(status_info)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    get_turbo_movie_search_instance()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä
    port = int(os.getenv("PORT", 5002))
    debug_mode = os.getenv("FLASK_DEBUG", "0").lower() in ["1", "true", "yes"]
    app.run(host="0.0.0.0", port=port, debug=debug_mode)
