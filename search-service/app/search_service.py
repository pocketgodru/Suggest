import os
import logging
import numpy as np
from flask import Flask, request, jsonify
from flask_cors import CORS
import faiss
from time import time, sleep
import requests
from dotenv import load_dotenv
from pymongo import MongoClient
from bson import json_util, ObjectId
import json
from datetime import datetime
import re
import hashlib
from sklearn.preprocessing import normalize

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –¥–ª—è Hugging Face
API_URL = "https://api-inference.huggingface.co/pipeline/feature-extraction/intfloat/multilingual-e5-large-instruct"
HEADERS = {"Authorization": "Bearer "} #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

app = Flask(__name__)
CORS(app)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ TurboMovieSearch
_turbo_movie_search_instance = None

class TurboMovieSearch:
    def __init__(self):
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ MongoDB –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        mongo_uri = os.getenv("MONGO_URI", "mongodb://mongodb:27017")
        mongo_db = os.getenv("MONGO_DB", "movies_db")
        mongo_collection = os.getenv("MONGO_COLLECTION", "movies")
        
        logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB: {mongo_uri}, –ë–î: {mongo_db}, –ö–æ–ª–ª–µ–∫—Ü–∏—è: {mongo_collection}")
        
        self.client = MongoClient(mongo_uri)
        self.db = self.client[mongo_db]
        self.collection = self.db[mongo_collection]

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MongoDB
        self.metadata = self._load_metadata()
        self.embeddings = self._load_or_generate_embeddings()

        # FAISS Index
        self.index = faiss.IndexFlatL2(self.embeddings.shape[1])
        self.index.add(self.embeddings)

        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∂–∞–Ω—Ä–∞–º –∏ –≥–æ–¥–∞–º
        self._precompute_features()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        self.search_cache = {}
        self.cache_hits = 0
        self.total_searches = 0
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.movie_count = len(self.metadata)
        
        logger.info("‚úÖ –ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

    def _load_metadata(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ MongoDB"""
        logger.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –∏–∑ MongoDB...")
        
        max_retries = 5
        retry_interval = 5  # –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        for retry in range(max_retries):
            start_time = time()
            try:
                movies = list(self.collection.find({}, {
                    "_id": 1, 
                    "id": 1,  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ id –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                    "name": 1, 
                    "alternativeName": 1,
                    "description": 1, 
                    "shortDescription": 1,
                    "year": 1, 
                    "genres": 1,
                    "rating": 1,
                    "poster": 1,
                    "type": 1,
                    "countries": 1
                }))
                
                if not movies:
                    if retry < max_retries - 1:
                        logger.warning(f"‚ö†Ô∏è –í MongoDB –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∏–ª—å–º—ã (–ø–æ–ø—ã—Ç–∫–∞ {retry+1}/{max_retries}). –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_interval} —Å–µ–∫...")
                        sleep(retry_interval)
                        retry_interval *= 1.5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                        continue
                    else:
                        logger.warning("‚ö†Ô∏è –í MongoDB –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∏–ª—å–º—ã –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫!")
                        return []
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                filtered_movies = []
                for movie in movies:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∏–ª—å–º –∏–º–µ–µ—Ç ID –∏ –∏–º—è
                    if "_id" not in movie or "name" not in movie:
                        continue
                        
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∏–ª—å–º—ã –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
                    if not movie.get("name"):
                        continue
                        
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                    if isinstance(movie.get("name"), str) and "—Ç–µ—Å—Ç–æ–≤—ã–π_—Ñ–∏–ª—å–º" in movie.get("name", "").lower():
                        continue
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≥–æ–¥–∞
                    if not isinstance(movie.get("year"), int) or movie.get("year") < 1900:
                        if "year" in movie:
                            try:
                                movie["year"] = int(movie["year"])
                            except:
                                movie["year"] = 2000
                        else:
                            movie["year"] = 2000
                            
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π MongoDB ID
                    movie["mongodb_id"] = str(movie["_id"])
                            
                    filtered_movies.append(movie)
                    
                load_time = time() - start_time
                logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(filtered_movies)} —Ñ–∏–ª—å–º–æ–≤ –∏–∑ {len(movies)} ({len(movies) - len(filtered_movies)} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ) –∑–∞ {load_time:.2f} —Å–µ–∫")
                
                return filtered_movies
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–ª—å–º–æ–≤ –∏–∑ MongoDB: {str(e)}")
                if retry < max_retries - 1:
                    logger.warning(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_interval} —Å–µ–∫...")
                    sleep(retry_interval)
                    retry_interval *= 1.5
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ MongoDB –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
                    return []

    def _load_or_generate_embeddings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ"""
        embeddings_file = os.getenv("EMBEDDINGS_FILE", "movies_embeddings.npy")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
        try:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {embeddings_file}")
            embeddings = np.load(embeddings_file)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∏–ª—å–º–æ–≤ –≤ MongoDB
            if not self.metadata:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ MongoDB
                max_retries = 5
                wait_time = 10  # –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                
                for retry in range(max_retries):
                    logger.warning(f"‚ö†Ô∏è –í MongoDB –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤, –Ω–æ –Ω–∞–π–¥–µ–Ω—ã —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è {embeddings.shape[0]} —Ñ–∏–ª—å–º–æ–≤")
                    logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ MongoDB... ({retry+1}/{max_retries})")
                    
                    # –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    sleep(wait_time)
                    
                    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ MongoDB
                    self.metadata = self._load_metadata()
                    
                    if self.metadata:
                        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤ MongoDB: {len(self.metadata)} —Ñ–∏–ª—å–º–æ–≤")
                        break
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                    wait_time *= 1.5
                
                # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ –µ—â–µ –Ω–µ—Ç, –Ω–µ —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                if not self.metadata:
                    logger.error("‚ùå –í MongoDB —Ç–∞–∫ –∏ –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è")
                    logger.error("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB")
                    raise Exception("–í MongoDB –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–∞—Ö. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å.")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–µ–π
            if len(self.metadata) != embeddings.shape[0]:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤: {len(self.metadata)} —Ñ–∏–ª—å–º–æ–≤ –≤ –±–∞–∑–µ, –Ω–æ {embeddings.shape[0]} —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤ —Ñ–∞–π–ª–µ")
                logger.info("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
                return self._generate_embeddings()
                
            logger.info(f"‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞: {embeddings.shape}")
            return embeddings
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏–∑ —Ñ–∞–π–ª–∞: {str(e)}")
            logger.info("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
            return self._generate_embeddings()
    
    def _generate_embeddings(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è —Ñ–∏–ª—å–º–æ–≤"""
        logger.info("üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è —Ñ–∏–ª—å–º–æ–≤...")
        
        start_time = time()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤
        texts = []
        for movie in self.metadata:
            # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
            name = movie.get("name", "")
            alt_name = movie.get("alternativeName", "")
            description = movie.get("description", "") or movie.get("shortDescription", "") or ""
            
            # –ñ–∞–Ω—Ä—ã
            genres_text = ""
            genres = movie.get("genres", [])
            if genres and isinstance(genres, list):
                genre_names = []
                for genre in genres:
                    if isinstance(genre, dict) and "name" in genre:
                        genre_names.append(genre["name"])
                    elif isinstance(genre, str):
                        genre_names.append(genre)
                genres_text = " ".join(genre_names)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç, —Ä–∞–∑–¥–µ–ª—è—è –ø–æ–ª—è –ø—Ä–æ–±–µ–ª–∞–º–∏
            text_fields = []
            if name:
                text_fields.append(name)
            if alt_name and alt_name != name:
                text_fields.append(alt_name)
            if genres_text:
                text_fields.append(genres_text)
            if description:
                # –°–æ–∫—Ä–∞—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥
                description_words = description.split()[:100]
                text_fields.append(" ".join(description_words))
                
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–æ–ª—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
            text = " ".join(text_fields)
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã
            text = re.sub(r'\s+', ' ', text).strip()
            texts.append(text)
            
        logger.info(f"üî§ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(texts)} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π —Ñ–∏–ª—å–º–æ–≤")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ —á–µ—Ä–µ–∑ Hugging Face API
        embeddings = []
        batch_size = 10  # –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        
        try:
            for i in range(0, len(texts), batch_size):
                batch = texts[i:i+batch_size]
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ {i//batch_size + 1}/{len(texts)//batch_size + 1}")
                
                # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –ø–∞–∫–µ—Ç–µ
                batch_embeddings = []
                for text in batch:
                    embedding = self.get_embedding(text)
                    if embedding is not None:
                        batch_embeddings.append(embedding)
                    else:
                        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω—É–ª–µ–≤–æ–π –≤–µ–∫—Ç–æ—Ä
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è —Ç–µ–∫—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω—É–ª–µ–≤–æ–π –≤–µ–∫—Ç–æ—Ä")
                        batch_embeddings.append(np.zeros(1024))  # –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–∞ multilingual-e5-large
                
                embeddings.extend(batch_embeddings)
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
                sleep(1)
            
            embeddings = np.array(embeddings)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
            np.save("movies_embeddings.npy", embeddings)
            logger.info(f"üíæ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª (—Ñ–æ—Ä–º–∞: {embeddings.shape})")
            
            embedding_time = time() - start_time
            logger.info(f"‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ {embedding_time:.2f} —Å–µ–∫!")
            
            return embeddings
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {str(e)}")
            raise

    def _precompute_features(self):
        """–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—á–∏—Å–ª—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏"""
        years = np.array([item.get('year', 2000) for item in self.metadata], dtype=np.float32)
        self.norm_years = (years - years.min()) / (years.max() - years.min()) if years.max() > years.min() else years

        self.genre_index = {}
        for idx, item in enumerate(self.metadata):
            for genre in item.get('genres', []):
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –∂–∞–Ω—Ä –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª–µ–º 'name'
                if isinstance(genre, dict) and 'name' in genre:
                    genre_name = genre['name']
                else:
                    genre_name = genre
                
                if genre_name not in self.genre_index:
                    self.genre_index[genre_name] = []
                self.genre_index[genre_name].append(idx)

        self.embeddings = normalize(self.embeddings)
    
    def _get_cache_key(self, query, year_filter, genre_filter):
        """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        key = f"{query}|{year_filter}|{genre_filter}"
        return hashlib.md5(key.encode()).hexdigest()
    
    def check_for_updates(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –Ω–µ –∑–∞–≥—Ä—É–∂–∞—è –∏—Ö
        current_count = self.collection.count_documents({})
        
        if current_count > self.movie_count:
            logger.info(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã! –ë—ã–ª–æ: {self.movie_count}, —Å—Ç–∞–ª–æ: {current_count}")
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            self.metadata = self._load_metadata()
            self.movie_count = len(self.metadata)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
            self.embeddings = self._generate_embeddings()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º FAISS –∏–Ω–¥–µ–∫—Å
            self.index = faiss.IndexFlatL2(self.embeddings.shape[1])
            self.index.add(self.embeddings)
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            self._precompute_features()
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à
            self.search_cache.clear()
            self.cache_hits = 0
            self.total_searches = 0
            
            logger.info("‚úÖ –ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            return True
        
        return False

    def get_embedding(self, text):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ Hugging Face API"""
        try:
            payload = {"inputs": f"query: {text}"}
            response = requests.post(API_URL, headers=HEADERS, json=payload)
            if response.status_code != 200:
                logger.error(f"–û—à–∏–±–∫–∞ API: {response.text}")
                return None
            return np.array(response.json())
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {str(e)}")
            return None

    def search(self, query, top_k=10, year_filter=None, genre_filter=None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤"""
        start_time = time()
        self.total_searches += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = self._get_cache_key(query, year_filter, genre_filter)
        if cache_key in self.search_cache:
            self.cache_hits += 1
            hit_rate = (self.cache_hits / self.total_searches) * 100
            logger.info(f"üîç –ö—ç—à-—Ö–∏—Ç! ({self.cache_hits}/{self.total_searches}, {hit_rate:.1f}%)")
            return self._prepare_results_for_json(self.search_cache[cache_key])

        clean_query, year_boost, genres = self._parse_query(query)

        if year_filter:
            year_boost = (int(year_filter) - 1900) / 125
        if genre_filter:
            genres.append(genre_filter.lower())

        # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ —á–µ—Ä–µ–∑ API
        query_embedding = self.get_embedding(clean_query)
        if query_embedding is None:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞")
            return []

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥
        query_embedding = query_embedding / np.linalg.norm(query_embedding)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-N —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–º—É —Å—Ö–æ–¥—Å—Ç–≤—É
        faiss_top_k = min(100, len(self.metadata))
        
        text_scores = np.dot(self.embeddings, query_embedding.T).flatten()
        year_scores = np.zeros_like(text_scores)
        genre_scores = np.zeros_like(text_scores)

        if year_boost is not None:
            year_scores = 1.0 - np.abs(self.norm_years - year_boost)

        if genres:
            for genre in genres:
                genre_key = genre
                if genre_key not in self.genre_index:
                    for key in self.genre_index.keys():
                        if key.lower() == genre.lower():
                            genre_key = key
                            break
                if genre_key in self.genre_index:
                    genre_scores[self.genre_index[genre_key]] += 0.1

        total_scores = 0.85 * text_scores + 0.05 * year_scores + 0.1 * genre_scores

        indices = np.argpartition(total_scores, -faiss_top_k)[-faiss_top_k:]
        best_indices = indices[np.argsort(-total_scores[indices])]

        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = []
        for idx in best_indices:
            if total_scores[idx] > 0.1:  # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                movie = self.metadata[idx].copy()
                movie["relevance_score"] = float(total_scores[idx])
                results.append(movie)
                if len(results) >= top_k:
                    break

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫—ç—à
        self.search_cache[cache_key] = results
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
        if len(self.search_cache) > 1000:
            random_key = next(iter(self.search_cache))
            del self.search_cache[random_key]

        logger.info(f"‚è± –ü–æ–∏—Å–∫ –∑–∞ {time() - start_time:.2f}s | –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ñ–∏–ª—å–º–æ–≤")
        return self._prepare_results_for_json(results)

    def _parse_query(self, query):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
        year_match = re.search(r'\b(19\d{2}|20[0-2]\d)\b', query)
        year_boost = None
        if year_match:
            year = int(year_match.group())
            year_boost = (year - 1900) / 125

        genres = []
        for genre in self.genre_index.keys():
            # –ù–∞–º –Ω–µ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–ª–æ–≤–∞—Ä–∏ genres, —Ç.–∫. self.genre_index —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä–æ–∫–∏
            if isinstance(genre, str) and re.search(r'\b' + re.escape(genre) + r'\b', query, re.IGNORECASE):
                genres.append(genre)

        clean_query = query
        return clean_query, year_boost, genres

    def _prepare_results_for_json(self, results):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è JSON, –∏—Å–ø–æ–ª—å–∑—É—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ ID –∏–∑ MongoDB"""
        prepared_results = []
        for result in results:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ª–æ–≤–∞—Ä—è
            prepared_result = {}
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π MongoDB ID
            if "mongodb_id" in result:
                prepared_result["_id"] = result["mongodb_id"]
                prepared_result["movie_id"] = result["mongodb_id"]
            else:
                # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ—Ç MongoDB ID, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π
                temp_name = result["name"].replace(" ", "_").lower()
                prepared_result["_id"] = f"temp_{temp_name}"
                prepared_result["movie_id"] = prepared_result["_id"]
                logger.warning(f"MongoDB ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ñ–∏–ª—å–º–∞ '{result['name']}', —Å–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID")
            
            # –ö–æ–ø–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            for key, value in result.items():
                if key not in ["_id", "movie_id", "mongodb_id"]:
                    prepared_result[key] = value
            
            prepared_results.append(prepared_result)
        
        return prepared_results 

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ TurboMovieSearch (Singleton)
def get_turbo_movie_search_instance():
    global _turbo_movie_search_instance
    if _turbo_movie_search_instance is None:
        _turbo_movie_search_instance = TurboMovieSearch()
    return _turbo_movie_search_instance

# API –º–∞—Ä—à—Ä—É—Ç—ã

@app.route("/health")
def health_check():
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞.
    –ù–µ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TurboMovieSearch.
    """
    return jsonify({"status": "ok", "service": "search-service"}), 200

@app.route("/search")
def search_api():
    """API –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤"""
    try:
        query = request.args.get("query", "")
        year_filter = request.args.get("year")
        genre_filter = request.args.get("genre")
        top_k = request.args.get("limit", 10, type=int)
        
        if not query:
            return jsonify([])
        
        searcher = get_turbo_movie_search_instance()
        results = searcher.search(query, top_k=top_k, year_filter=year_filter, genre_filter=genre_filter)
        #logger.info(f"{results}")
        return jsonify(results)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/status")
def status():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        searcher = get_turbo_movie_search_instance()
        
        status_info = {
            "movies_count": searcher.movie_count,
            "cache_size": len(searcher.search_cache),
            "cache_hit_rate": f"{(searcher.cache_hits / searcher.total_searches * 100):.1f}%" if searcher.total_searches > 0 else "0.0%",
            "total_searches": searcher.total_searches,
            "embeddings_shape": list(searcher.embeddings.shape),
            "genres_count": len(searcher.genre_index)
        }
        
        return jsonify(status_info)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    get_turbo_movie_search_instance()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä
    port = int(os.getenv("PORT", 5002))
    debug_mode = os.getenv("FLASK_DEBUG", "0").lower() in ["1", "true", "yes"]
    app.run(host="0.0.0.0", port=port, debug=debug_mode)
