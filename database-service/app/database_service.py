from flask import Flask, jsonify, request
from redis_client import RedisMovieClient
from mongo_client import MongoMovieClient
import os
from dotenv import load_dotenv
from flask_cors import CORS
import threading
import time
import datetime

load_dotenv()

app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
redis_client = RedisMovieClient(
    host=os.getenv("REDIS_HOST", "localhost"),
    port=int(os.getenv("REDIS_PORT", 6379)),
    db=int(os.getenv("REDIS_DB", 0))
)

mongo_client = MongoMovieClient(
    host=os.getenv("MONGO_URI", "mongodb://localhost:27017"),
    db_name=os.getenv("MONGO_DB", "movies_db"),
    collection_name=os.getenv("MONGO_COLLECTION", "movies")
)

def auto_sync_mongodb_to_redis():
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Redis —Å MongoDB.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
    """
    # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π, —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è Redis –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    time.sleep(10)  
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–µ—Å–ª–∏ –≤ Redis –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)
        redis_movies_count = len(redis_client.get_all_movies() or [])
        
        if redis_movies_count == 0:
            app.logger.info("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: Redis –ø—É—Å—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏–∑ MongoDB")
            redis_client.load_from_mongodb(mongo_client)
            app.logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        else:
            app.logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –í Redis —É–∂–µ –µ—Å—Ç—å {redis_movies_count} —Ñ–∏–ª—å–º–æ–≤")
    except Exception as e:
        app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")

@app.route("/health")
def health_check():
    return jsonify({"status": "healthy"})

@app.route("/movies/<int:movie_id>")
def get_movie(movie_id):
    movie = redis_client.get_movie_by_id(movie_id)
    if movie:
        return jsonify(movie)
    return jsonify({"error": "Movie not found"}), 404

@app.route("/movies/search")
def search_movies():
    query = request.args.get("query", "")
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    if not all(ord(c) < 128 for c in query) and any(c == '√ê' for c in query):
        try:
            # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑ latin1 –≤ utf-8 (–∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É)
            query = query.encode('latin1').decode('utf-8')
            app.logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {query}")
        except Exception as e:
            app.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
    
    genre = request.args.get("genre")
    year = request.args.get("year")
    movie_type = request.args.get("type")
    country = request.args.get("country")
    category = request.args.get("category")
    
    results = redis_client.search_movies(
        query=query,
        genre=genre,
        year=year,
        movie_type=movie_type,
        country=country,
        category=category
    )
    
    return jsonify(results)

# –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å web-service
@app.route("/search_movies")
def search_movies_alternative():
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ /movies/search
    """
    return search_movies()

@app.route("/genres")
def get_genres():
    genres = redis_client.get_genres()
    return jsonify(genres)

@app.route("/countries")
def get_countries():
    countries = redis_client.get_countries()
    return jsonify(countries)

@app.route("/categories")
def get_categories():
    categories = redis_client.get_categories()
    return jsonify(categories)

@app.route("/create_index", methods=["POST"])
def create_index():
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–¥–µ–∫—Å RediSearch –¥–ª—è –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.
    –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è web-service –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–Ω–¥–µ–∫—Å–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.
    """
    try:
        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ _ensure_search_index –∏–∑ redis_client –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞
        redis_client._ensure_search_index()
        return jsonify({"status": "success", "message": "–ò–Ω–¥–µ–∫—Å RediSearch —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"})
    except Exception as e:
        app.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞ RediSearch: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/sync/mongodb-to-redis", methods=["POST"])
def sync_mongodb_to_redis():
    try:
        result = redis_client.load_from_mongodb(mongo_client)
        return jsonify({"status": "success", "message": f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {result} —Ñ–∏–ª—å–º–æ–≤"})
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

# –ù–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ª–∞–π–∫–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

@app.route("/like_movie", methods=["POST"])
def like_movie():
    """–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ —Ñ–∏–ª—å–º—É"""
    data = request.get_json()
    if not data or "user_id" not in data or "movie_id" not in data:
        return jsonify({"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞"}), 400
    
    user_id = data["user_id"]
    movie_id = data["movie_id"]
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∞–π–∫ –≤ Redis
        result = redis_client.like_movie(user_id, movie_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∞–π–∫ –≤ MongoDB
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º movie_id –∫ —Ü–µ–ª–æ–º—É —á–∏—Å–ª—É, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            movie_id_int = int(movie_id) if str(movie_id).isdigit() else movie_id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ª–∞–π–∫
            existing_like = mongo_client.db["likes"].find_one({
                "user_id": user_id, 
                "movie_id": movie_id_int
            })
            
            if not existing_like:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∞–π–∫ –≤ MongoDB
                mongo_client.db["likes"].insert_one({
                    "user_id": user_id,
                    "movie_id": movie_id_int,
                    "timestamp": datetime.datetime.utcnow()
                })
                app.logger.info(f"–õ–∞–π–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ MongoDB: user_id={user_id}, movie_id={movie_id_int}")
        except Exception as mongo_err:
            app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–∞–π–∫–∞ –≤ MongoDB: {str(mongo_err)}")
        
        return jsonify({"status": "success", "liked": True})
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/unlike_movie", methods=["POST"])
def unlike_movie():
    """–£–±—Ä–∞—Ç—å –ª–∞–π–∫ —Å —Ñ–∏–ª—å–º–∞"""
    data = request.get_json()
    if not data or "user_id" not in data or "movie_id" not in data:
        return jsonify({"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞"}), 400
    
    user_id = data["user_id"]
    movie_id = data["movie_id"]
    
    try:
        # –£–¥–∞–ª—è–µ–º –ª–∞–π–∫ –∏–∑ Redis
        result = redis_client.unlike_movie(user_id, movie_id)
        
        # –£–¥–∞–ª—è–µ–º –ª–∞–π–∫ –∏–∑ MongoDB
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º movie_id –∫ —Ü–µ–ª–æ–º—É —á–∏—Å–ª—É, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            movie_id_int = int(movie_id) if str(movie_id).isdigit() else movie_id
            
            # –£–¥–∞–ª—è–µ–º –ª–∞–π–∫ –∏–∑ MongoDB
            mongo_client.db["likes"].delete_one({
                "user_id": user_id, 
                "movie_id": movie_id_int
            })
            app.logger.info(f"–õ–∞–π–∫ —É–¥–∞–ª–µ–Ω –∏–∑ MongoDB: user_id={user_id}, movie_id={movie_id_int}")
        except Exception as mongo_err:
            app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞ –∏–∑ MongoDB: {str(mongo_err)}")
        
        return jsonify({"status": "success", "liked": False})
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–∞–π–∫–∞: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/remove_all_likes", methods=["POST"])
def remove_all_likes():
    """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ª–∞–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    data = request.get_json()
    if not data or "user_id" not in data:
        return jsonify({"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞"}), 400
    
    user_id = data["user_id"]
    
    try:
        # –£–¥–∞–ª—è–µ–º –ª–∞–π–∫–∏ –∏–∑ Redis
        result = redis_client.remove_all_likes(user_id)
        
        # –£–¥–∞–ª—è–µ–º –ª–∞–π–∫–∏ –∏–∑ MongoDB
        try:
            delete_result = mongo_client.db["likes"].delete_many({"user_id": user_id})
            app.logger.info(f"–£–¥–∞–ª–µ–Ω–æ {delete_result.deleted_count} –ª–∞–π–∫–æ–≤ –∏–∑ MongoDB –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as mongo_err:
            app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–∞–π–∫–æ–≤ –∏–∑ MongoDB: {str(mongo_err)}")
        
        return jsonify({"status": "success", "message": "–í—Å–µ –ª–∞–π–∫–∏ —É–¥–∞–ª–µ–Ω—ã"})
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –ª–∞–π–∫–æ–≤: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/get_liked_movies/<user_id>")
def get_liked_movies(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        limit = request.args.get("limit", 100, type=int)
        movies = redis_client.get_user_liked_movies(user_id)
        if movies:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ñ–∏–ª—å–º–æ–≤
            return jsonify({
                "status": "success", 
                "movies": movies[:limit] if len(movies) > limit else movies,
                "total": len(movies)
            })
        else:
            return jsonify({"status": "success", "movies": [], "total": 0})
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ñ–∏–ª—å–º–æ–≤: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/is_movie_liked", methods=["POST"])
def is_movie_liked():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ª–∞–π–∫–Ω—É–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–∏–ª—å–º (POST –º–µ—Ç–æ–¥)"""
    data = request.get_json()
    if not data or "user_id" not in data or "movie_id" not in data:
        return jsonify({"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞"}), 400
    
    user_id = data["user_id"]
    movie_id = data["movie_id"]
    
    try:
        result = redis_client.is_movie_liked(user_id, movie_id)
        return jsonify({"liked": result})
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∞–π–∫–∞: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/is_movie_liked/<user_id>/<movie_id>", methods=["GET"])
def is_movie_liked_get(user_id, movie_id):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ª–∞–π–∫–Ω—É–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–∏–ª—å–º (GET –º–µ—Ç–æ–¥)"""
    try:
        result = redis_client.is_movie_liked(user_id, movie_id)
        return jsonify({"liked": result})
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∞–π–∫–∞: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/get_recommendations/<user_id>")
def get_recommendations(user_id):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –ª–∞–π–∫–æ–≤.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ª–∞–π–∫–Ω—É—Ç—ã–µ —Ñ–∏–ª—å–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        liked_movies = mongo_client.db["likes"].find({"user_id": user_id})
        liked_movie_ids = []
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID —Ñ–∏–ª—å–º–æ–≤ –∫ –Ω—É–∂–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
        for like in liked_movies:
            movie_id = like["movie_id"]
            # –î–æ–±–∞–≤–ª—è–µ–º ID –≤ —Å–ø–∏—Å–æ–∫
            liked_movie_ids.append(movie_id)
        
        app.logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –ª–∞–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {liked_movie_ids}")
        
        if not liked_movie_ids:
            app.logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ª–∞–π–∫–æ–≤")
            return jsonify({"movies": [], "total": 0})
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ñ–∏–ª—å–º–æ–≤
        recommended_movies = redis_client.get_recommendations(liked_movie_ids, limit=10)
        app.logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {len(recommended_movies)} —Ñ–∏–ª—å–º–æ–≤")
        
        return jsonify({"movies": recommended_movies, "total": len(recommended_movies)})
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/get_user_rating/<user_id>/<movie_id>")
def get_user_rating(user_id, movie_id):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞.
    """
    try:
        # –ò—â–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ MongoDB
        rating = mongo_client.db["ratings"].find_one(
            {"user_id": user_id, "movie_id": int(movie_id)}
        )
        
        if rating:
            return jsonify({"rating": rating["rating"], "status": "success"})
        else:
            return jsonify({"rating": 0, "status": "not_rated"})
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/save_rating", methods=["POST"])
def save_rating():
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å–º–∞.
    """
    try:
        data = request.get_json()
        user_id = data.get("user_id")
        movie_id = data.get("movie_id")
        rating_value = data.get("rating")
        
        if not user_id or not movie_id or not rating_value:
            return jsonify({"status": "error", "message": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"}), 400
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º movie_id –∫ —Ü–µ–ª–æ–º—É —á–∏—Å–ª—É
        try:
            movie_id = int(movie_id)
        except ValueError:
            return jsonify({"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç movie_id"}), 400
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ MongoDB
        result = mongo_client.db["ratings"].update_one(
            {"user_id": user_id, "movie_id": movie_id},
            {"$set": {"rating": int(rating_value)}},
            upsert=True
        )
        
        return jsonify({"status": "success", "message": "–†–µ–π—Ç–∏–Ω–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω"})
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/get_comments/<movie_id>")
def get_comments(movie_id):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞.
    """
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º movie_id –∫ —Ü–µ–ª–æ–º—É —á–∏—Å–ª—É
        try:
            movie_id = int(movie_id)
        except ValueError:
            return jsonify({"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç movie_id"}), 400
        
        # –ò—â–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ MongoDB
        comments = list(mongo_client.db["comments"].find(
            {"movie_id": movie_id},
            {"_id": 0}  # –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª–µ _id –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        ).sort("created_at", -1))  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        
        return jsonify({"comments": comments, "total": len(comments)})
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route("/save_comment", methods=["POST"])
def save_comment():
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å–º–∞.
    """
    try:
        data = request.get_json()
        user_id = data.get("user_id")
        movie_id = data.get("movie_id")
        comment_text = data.get("comment")
        
        if not user_id or not movie_id or not comment_text:
            return jsonify({"status": "error", "message": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"}), 400
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º movie_id –∫ —Ü–µ–ª–æ–º—É —á–∏—Å–ª—É
        try:
            movie_id = int(movie_id)
        except ValueError:
            return jsonify({"status": "error", "message": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç movie_id"}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
        current_time = datetime.datetime.utcnow()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ MongoDB
        comment = {
            "user_id": user_id,
            "movie_id": movie_id,
            "text": comment_text,
            "created_at": current_time
        }
        
        result = mongo_client.db["comments"].insert_one(comment)
        
        # –£–¥–∞–ª—è–µ–º _id –∏–∑ –æ—Ç–≤–µ—Ç–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É
        comment["_id"] = str(result.inserted_id)
        comment["created_at"] = comment["created_at"].isoformat()
        
        return jsonify({"status": "success", "comment": comment})
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
@app.route("/get_popular_movies")
def get_popular_movies():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º limit –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10
        limit = request.args.get("limit", 10, type=int)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã —á–µ—Ä–µ–∑ Redis
        popular_movies = redis_client.get_popular_movies(limit)
        
        app.logger.info(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º {len(popular_movies)} –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤")
        return jsonify(popular_movies)
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    sync_thread = threading.Thread(target=auto_sync_mongodb_to_redis)
    sync_thread.daemon = True  # –ü–æ—Ç–æ–∫ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    sync_thread.start()
    
    app.run(host="0.0.0.0", port=5001, debug=True) 