from redis import Redis
import time
import json
from functools import wraps

def redis_error_handler(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Redis"""
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ Redis –≤ {func.__name__}: {str(e)}")
            return None
    return wrapper

class RedisMovieClient:
    def __init__(self, host="localhost", port=6379, db=0, auto_load_from_mongo=False):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Redis."""
        try:
            self.redis_client = Redis(host=host, port=port, db=db, decode_responses=True)
            self.redis_client.ping()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –≤ –±–∞–∑–µ
            movie_count = len(self.redis_client.keys("movie:*") or [])
            print(f"üìä –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {movie_count} —Ñ–∏–ª—å–º–æ–≤")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–µ–∫—Å–∞ RediSearch
            self._ensure_search_index()

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if auto_load_from_mongo and movie_count == 0:
                from mongo_client import MongoMovieClient
                mongo_client = MongoMovieClient()
                self.load_from_mongodb(mongo_client)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {str(e)}")
            self.redis_client = None

    @redis_error_handler
    def _ensure_search_index(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–µ–∫—Å–∞ RediSearch –∏ —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω–¥–µ–∫—Å
            index_exists = False
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–¥–µ–∫—Å–µ
                self.redis_client.execute_command("FT.INFO", "movie_idx")
                index_exists = True
                print("‚úÖ –ò–Ω–¥–µ–∫—Å RediSearch —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            except Exception:
                # –ò–Ω–¥–µ–∫—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                index_exists = False
                print("‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å RediSearch –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π")

            # –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            if not index_exists:
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                try:
                    self.redis_client.execute_command("FT.DROPINDEX", "movie_idx")
                except Exception:
                    pass

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
                # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ–ª—è: name, description, shortDescription
                # –ü—Ä–µ—Ñ–∏–∫—Å movie: —É–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –∫–ª—é—á–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å movie:
                create_index_cmd = [
                    "FT.CREATE", "movie_idx", "ON", "HASH", "PREFIX", "1", "movie:",
                    "SCHEMA",
                    "name", "TEXT", "WEIGHT", "5.0",
                    "description", "TEXT", "WEIGHT", "1.0",
                    "shortDescription", "TEXT", "WEIGHT", "2.0"
                ]
                self.redis_client.execute_command(*create_index_cmd)
                print("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å RediSearch –¥–ª—è —Ñ–∏–ª—å–º–æ–≤")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–¥–µ–∫—Å–∞ RediSearch: {str(e)}")
            raise

    @redis_error_handler
    def save_movie(self, movie):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–¥–∏–Ω —Ñ–∏–ª—å–º –≤ Redis."""
        if not self.redis_client:
            print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return False
            
        # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–∏–ª—å–º–∞
        movie_id = None
        if "id" in movie:
            movie_id = movie["id"]
        elif "_id" in movie:
            movie_id = movie["_id"]
            
        if movie_id is None:
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∏–ª—å–º –±–µ–∑ ID: {movie}")
            return False
            
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Å—Ç—Ä–æ–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "movie:"
        redis_id = f"movie:{movie_id}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ñ–∏–ª—å–º–∞ –¥–ª—è Redis
        redis_movie = self._prepare_movie_for_redis(movie)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å–º –≤ Redis
        self.redis_client.hset(redis_id, mapping=redis_movie)
        
        # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —Ñ–∏–ª—å–º
        self._index_movie(redis_id, redis_movie)
        
        print(f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∏–ª—å–º –≤ Redis: {redis_id} -> {redis_movie.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        return True

    @redis_error_handler
    def save_movies_bulk(self, movies_list):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –≤ Redis."""
        if not self.redis_client:
            print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return 0
            
        if not movies_list:
            print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤")
            return 0
            
        pipeline = self.redis_client.pipeline()
        saved_count = 0

        for movie in movies_list:
            # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–∏–ª—å–º–∞
            movie_id = None
            if "id" in movie:
                movie_id = movie["id"]
            elif "_id" in movie:
                movie_id = movie["_id"]
                
            if movie_id is None:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∏–ª—å–º –±–µ–∑ ID: {movie}")
                continue

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Å—Ç—Ä–æ–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "movie:"
            redis_id = f"movie:{movie_id}"
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ñ–∏–ª—å–º–∞ –¥–ª—è Redis
            redis_movie = self._prepare_movie_for_redis(movie)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å–º –≤ Redis
            pipeline.hset(redis_id, mapping=redis_movie)
            
            # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —Ñ–∏–ª—å–º
            self._index_movie_pipeline(pipeline, redis_id, redis_movie)
            
            saved_count += 1
            
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤ pipeline
        pipeline.execute()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {saved_count} —Ñ–∏–ª—å–º–æ–≤ –≤ Redis!")
        return saved_count

    def _prepare_movie_for_redis(self, movie):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∏–ª—å–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Redis."""
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ñ–∏–ª—å–º–∞ –¥–ª—è Redis
        redis_movie = {}
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        redis_movie["name"] = str(movie.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∞–Ω—Ä–æ–≤
        genres = movie.get("genres", [])
        if genres is None:
            genres = []
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∂–∞–Ω—Ä—ã –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
        genre_list = []
        if isinstance(genres, list):
            for genre in genres:
                if isinstance(genre, str):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∂–∞–Ω—Ä —Å—Ç—Ä–æ–∫–æ–≤—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Å–ª–æ–≤–∞—Ä—è
                    if genre.startswith("{") and genre.endswith("}") and "'name':" in genre:
                        try:
                            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è –∂–∞–Ω—Ä–∞ –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                            import ast
                            genre_dict = ast.literal_eval(genre)
                            if isinstance(genre_dict, dict) and 'name' in genre_dict:
                                genre_list.append(genre_dict['name'])
                            else:
                                genre_list.append(genre)
                        except:
                            genre_list.append(genre)
                    else:
                        genre_list.append(genre)
                elif isinstance(genre, dict) and 'name' in genre:
                    genre_list.append(genre['name'])
                else:
                    genre_list.append(str(genre))
        
        redis_movie["genres"] = "|".join([str(g) for g in genre_list if g])
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–¥–∞
        year = movie.get("year", 2000)
        if year is None:
            year = 2000
        redis_movie["year"] = str(year)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞
        movie_type = movie.get("type", "movie")
        if movie_type is None:
            movie_type = "movie"
        redis_movie["type"] = str(movie_type)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–π
        description = movie.get("description", "")
        if description is None:
            description = ""
        redis_movie["description"] = str(description)
        
        short_description = movie.get("shortDescription", "")
        if short_description is None:
            short_description = ""
        redis_movie["shortDescription"] = str(short_description)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
        rating = movie.get("rating", 0)

        if rating is None:
            redis_movie["rating"] = "0"
        elif isinstance(rating, dict):
            # –í MongoDB —Ä–µ–π—Ç–∏–Ω–≥ —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å —Å —Ä–∞–∑–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ (kp, imdb, etc.)
            rating_value = 0
            rating_count = 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞
            if "kp" in rating and rating["kp"] is not None:
                try:
                    kp_rating = float(rating["kp"])
                    if kp_rating > 0:
                        rating_value += kp_rating
                        rating_count += 1
                except (ValueError, TypeError):
                    pass
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ IMDb
            if "imdb" in rating and rating["imdb"] is not None:
                try:
                    imdb_rating = float(rating["imdb"])
                    if imdb_rating > 0:
                        rating_value += imdb_rating
                        rating_count += 1
                except (ValueError, TypeError):
                    pass
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥, –µ—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
            if rating_count > 0:
                redis_movie["rating"] = str(rating_value / rating_count)
            else:
                redis_movie["rating"] = "0"
        else:
            try:
                rating = float(rating)
                redis_movie["rating"] = str(rating)
            except (ValueError, TypeError):
                redis_movie["rating"] = "0"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–µ—Ä–∞
        poster = movie.get("poster", "")
        if poster is None:
            poster = ""
        
        # –ï—Å–ª–∏ –ø–æ—Å—Ç–µ—Ä - —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –Ω–µ–≥–æ URL
        if isinstance(poster, str) and poster.startswith("{") and poster.endswith("}") and "'url':" in poster:
            try:
                import ast
                poster_dict = ast.literal_eval(poster)
                if isinstance(poster_dict, dict) and 'url' in poster_dict:
                    redis_movie["poster"] = json.dumps(poster_dict)
                else:
                    redis_movie["poster"] = str(poster)
            except:
                redis_movie["poster"] = str(poster)
        elif isinstance(poster, dict) and 'url' in poster:
            redis_movie["poster"] = json.dumps(poster)
        else:
            redis_movie["poster"] = str(poster)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        status = movie.get("status", "")
        if status is None:
            status = ""
        redis_movie["status"] = str(status)
        
        age_rating = movie.get("ageRating", "")
        if age_rating is None:
            age_rating = ""
        redis_movie["ageRating"] = str(age_rating)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω
        countries = movie.get("countries", [])
        if countries is None:
            countries = []
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–∞–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
        country_list = []
        if isinstance(countries, list):
            for country in countries:
                if isinstance(country, str):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–∞–Ω–∞ —Å—Ç—Ä–æ–∫–æ–≤—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Å–ª–æ–≤–∞—Ä—è
                    if country.startswith("{") and country.endswith("}") and "'name':" in country:
                        try:
                            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è —Å—Ç—Ä–∞–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                            import ast
                            country_dict = ast.literal_eval(country)
                            if isinstance(country_dict, dict) and 'name' in country_dict:
                                country_list.append(country_dict['name'])
                            else:
                                country_list.append(country)
                        except:
                            country_list.append(country)
                    else:
                        country_list.append(country)
                elif isinstance(country, dict) and 'name' in country:
                    country_list.append(country['name'])
                else:
                    country_list.append(str(country))
        
        redis_movie["countries"] = "|".join([str(c) for c in country_list if c])
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ releaseYear
        release_year = movie.get("releaseYear", year)
        if release_year is None:
            release_year = year
        redis_movie["releaseYear"] = str(release_year)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ isSeries
        is_series = movie.get("isSeries", False)
        if is_series is None:
            is_series = False
        redis_movie["isSeries"] = "1" if is_series else "0"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = movie.get("category", "")
        if category is None:
            category = ""
        redis_movie["category"] = str(category)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
        alternative_name = movie.get("alternativeName", "")
        if alternative_name is None:
            alternative_name = ""
        redis_movie["alternativeName"] = str(alternative_name)
        
        return redis_movie

    def _index_movie(self, redis_id, redis_movie):
        """–ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç —Ñ–∏–ª—å–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞."""
        if not self.redis_client:
            return
            
        try:
            # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ –∂–∞–Ω—Ä–∞–º
            genres = redis_movie.get("genres", "")
            if genres:
                for genre in genres.split("|"):
                    if genre:
                        self.redis_client.sadd(f"genre:{genre.lower()}", redis_id)
            
            # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ –≥–æ–¥—É
            year = redis_movie.get("year")
            if year:
                self.redis_client.sadd(f"year:{year}", redis_id)
            
            # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É
            movie_type = redis_movie.get("type")
            if movie_type:
                self.redis_client.sadd(f"type:{movie_type.lower()}", redis_id)
                
            # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
            countries = redis_movie.get("countries", "")
            if countries:
                for country in countries.split("|"):
                    if country:
                        self.redis_client.sadd(f"country:{country.lower()}", redis_id)
                        
            # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category = redis_movie.get("category")
            if category:
                self.redis_client.sadd(f"category:{category.lower()}", redis_id)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–∞ {redis_id}: {str(e)}")

    def _index_movie_pipeline(self, pipeline, redis_id, redis_movie):
        """–ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç —Ñ–∏–ª—å–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º pipeline."""
        try:
            # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ –∂–∞–Ω—Ä–∞–º
            genres = redis_movie.get("genres", "")
            if genres:
                if isinstance(genres, str):
                    # –ï—Å–ª–∏ –∂–∞–Ω—Ä—ã - —Å—Ç—Ä–æ–∫–∞, —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Å–∏–º–≤–æ–ª—É |
                    genre_list = genres.split("|")
                elif isinstance(genres, list):
                    # –ï—Å–ª–∏ –∂–∞–Ω—Ä—ã - —Å–ø–∏—Å–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
                    genre_list = genres
                else:
                    genre_list = []
                
                for genre in genre_list:
                    if genre:
                        pipeline.sadd(f"genre:{str(genre).lower()}", redis_id)
            
            # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ –≥–æ–¥—É
            year = redis_movie.get("year")
            if year:
                pipeline.sadd(f"year:{year}", redis_id)
            
            # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É
            movie_type = redis_movie.get("type")
            if movie_type:
                pipeline.sadd(f"type:{str(movie_type).lower()}", redis_id)
                
            # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ —Å—Ç—Ä–∞–Ω–∞–º
            countries = redis_movie.get("countries", "")
            if countries:
                if isinstance(countries, str):
                    # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω—ã - —Å—Ç—Ä–æ–∫–∞, —Ä–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Å–∏–º–≤–æ–ª—É |
                    country_list = countries.split("|")
                elif isinstance(countries, list):
                    # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω—ã - —Å–ø–∏—Å–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
                    country_list = countries
                else:
                    country_list = []
                
                for country in country_list:
                    if country:
                        pipeline.sadd(f"country:{str(country).lower()}", redis_id)
                        
            # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category = redis_movie.get("category")
            if category:
                pipeline.sadd(f"category:{str(category).lower()}", redis_id)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–∞ {redis_id} –≤ pipeline: {str(e)}")

    @redis_error_handler
    def search_movies(self, query="", genre=None, year=None, movie_type=None, country=None, category=None):
        """–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –≤ Redis —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RediSearch."""
        start_time = time.time()
        
        if not self.redis_client:
            print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return []
            
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å—Ç—Ä–æ–∫–∏
        query = str(query) if query is not None else ""
        genre = str(genre) if genre is not None else ""
        year = str(year) if year is not None else ""
        movie_type = str(movie_type) if movie_type is not None else ""
        country = str(country) if country is not None else ""
        category = str(category) if category is not None else ""
        
        print(f"üîç –ü–æ–∏—Å–∫: query='{query}', genre='{genre}', year='{year}', type='{movie_type}', country='{country}', category='{category}'")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ —Ñ–∏–ª—å–º–æ–≤
        movie_keys = set()
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å—ã
        if genre or year or movie_type or country or category:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å–º—ã –ø–æ –∂–∞–Ω—Ä—É
            if genre:
                genre_keys = self.redis_client.smembers(f"genre:{genre.lower()}") or set()
                if not movie_keys:
                    movie_keys = genre_keys
                else:
                    movie_keys &= genre_keys
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å–º—ã –ø–æ –≥–æ–¥—É
            if year:
                year_keys = self.redis_client.smembers(f"year:{year}") or set()
                if not movie_keys:
                    movie_keys = year_keys
                else:
                    movie_keys &= year_keys
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å–º—ã –ø–æ —Ç–∏–ø—É
            if movie_type:
                type_keys = self.redis_client.smembers(f"type:{movie_type.lower()}") or set()
                if not movie_keys:
                    movie_keys = type_keys
                else:
                    movie_keys &= type_keys
                    
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å–º—ã –ø–æ —Å—Ç—Ä–∞–Ω–µ
            if country:
                country_keys = self.redis_client.smembers(f"country:{country.lower()}") or set()
                if not movie_keys:
                    movie_keys = country_keys
                else:
                    movie_keys &= country_keys
                    
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if category:
                category_keys = self.redis_client.smembers(f"category:{category.lower()}") or set()
                if not movie_keys:
                    movie_keys = category_keys
                else:
                    movie_keys &= category_keys
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        results = []
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º RediSearch
        if query:
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è RediSearch
                search_query = query.replace('-', ' ').replace('_', ' ')
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏ —É–∂–µ –ø–æ–ª—É—á–µ–Ω—ã –∫–ª—é—á–∏ —Ñ–∏–ª—å–º–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∑–∞–ø—Ä–æ—Å
                if movie_keys:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ –≤ —Å–ø–∏—Å–æ–∫ ID –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                    movie_ids = [key.replace("movie:", "") for key in movie_keys]
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ ID
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º @id:{id1 | id2 | ...} –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ ID
                    id_filter = " | ".join(movie_ids)
                    ft_query = f"{search_query}"
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    search_results = self.redis_client.execute_command(
                        "FT.SEARCH", "movie_idx", ft_query, 
                        "LIMIT", "0", "100",
                        "RETURN", "3", "id", "name", "rating"
                    )
                else:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                    search_results = self.redis_client.execute_command(
                        "FT.SEARCH", "movie_idx", search_query, 
                        "LIMIT", "0", "100",
                        "RETURN", "3", "id", "name", "rating"
                    )
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
                if search_results and len(search_results) > 0:
                    # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    total_results = search_results[0]
                    
                    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã - –∫–ª—é—á–∏ –∏ –¥–∞–Ω–Ω—ã–µ
                    for i in range(1, len(search_results), 2):
                        if i + 1 < len(search_results):
                            key = search_results[i]  # –ö–ª—é—á —Ñ–∏–ª—å–º–∞
                            movie_data = search_results[i + 1]  # –î–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞
                            
                            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Å–ª–æ–≤–∞—Ä—å
                            movie_dict = {}
                            for j in range(0, len(movie_data), 2):
                                if j + 1 < len(movie_data):
                                    movie_dict[movie_data[j]] = movie_data[j + 1]
                            
                            # –ü–æ–ª—É—á–∞–µ–º ID —Ñ–∏–ª—å–º–∞
                            movie_id = key.replace("movie:", "")
                            
                            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞
                            full_movie = self.get_movie_by_id(movie_id)
                            if full_movie:
                                results.append(full_movie)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —á–µ—Ä–µ–∑ RediSearch: {str(e)}")
                
                # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ RediSearch –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç, –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å–º—ã
                if not movie_keys:
                    movie_keys = self.redis_client.keys("movie:*") or []
                
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(movie_keys)} —Ñ–∏–ª—å–º–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º")
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)
                for key in movie_keys:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
                        movie_data = self.redis_client.hmget(key, "name", "description", "shortDescription")
                        if not movie_data or not any(movie_data):
                            continue
                        
                        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                        name, description, short_description = movie_data
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
                        name = str(name or "").lower()
                        description = str(description or "").lower()
                        short_description = str(short_description or "").lower()
                        query_lower = query.lower()
                        
                        if query_lower in name or query_lower in description or query_lower in short_description:
                            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞
                            movie_id = key.replace("movie:", "")
                            full_movie = self.get_movie_by_id(movie_id)
                            if full_movie:
                                results.append(full_movie)
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏–ª—å–º–∞ {key}: {str(e)}")
                        continue
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, –ø—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–ª—å–º—ã –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
            for key in movie_keys:
                try:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞
                    movie_id = key.replace("movie:", "")
                    full_movie = self.get_movie_by_id(movie_id)
                    if full_movie:
                        results.append(full_movie)
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∏–ª—å–º–∞ {key}: {str(e)}")
                    continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
        results.sort(key=lambda x: x.get("rating", 0), reverse=True)
        
        elapsed_time = time.time() - start_time
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ñ–∏–ª—å–º–æ–≤ –∑–∞ {elapsed_time:.2f} —Å–µ–∫")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        return results[:30]

    def _convert_redis_to_movie(self, key, movie_data):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis –≤ —Å–ª–æ–≤–∞—Ä—å Python."""
        return self._prepare_movie_for_client(key, movie_data)
        
    def _prepare_movie_for_client(self, key, movie_data):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞."""
        result = {}
        
        # ID —Ñ–∏–ª—å–º–∞ (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ "movie:")
        result["id"] = key.replace("movie:", "")
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ
        result["name"] = str(movie_data.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–¥–∞
        try:
            year_value = movie_data.get("year")
            if year_value is None or year_value == "":
                result["year"] = 2000
            else:
                result["year"] = int(year_value)
        except (ValueError, TypeError):
            result["year"] = 2000
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–∞–Ω—Ä–æ–≤
        genres = movie_data.get("genres", "")
        if genres is None:
            result["genres"] = []
        elif isinstance(genres, str):
            genre_list = [g for g in genres.split("|") if g]
            result["genres"] = []
            for genre in genre_list:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∂–∞–Ω—Ä —Å—Ç—Ä–æ–∫–æ–≤—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Å–ª–æ–≤–∞—Ä—è
                if genre.startswith("{") and genre.endswith("}") and "'name':" in genre:
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è –∂–∞–Ω—Ä–∞ –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                        import ast
                        genre_dict = ast.literal_eval(genre)
                        if isinstance(genre_dict, dict) and 'name' in genre_dict:
                            result["genres"].append(genre_dict['name'])
                        else:
                            result["genres"].append(genre)
                    except:
                        result["genres"].append(genre)
                else:
                    result["genres"].append(genre)
        else:
            result["genres"] = []
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞
        result["type"] = str(movie_data.get("type", "movie") or "movie")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏–π
        result["description"] = str(movie_data.get("description", "") or "")
        result["shortDescription"] = str(movie_data.get("shortDescription", "") or "")
        
        # –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
        if not result["description"] and result["shortDescription"]:
            result["description"] = result["shortDescription"]
        elif not result["shortDescription"] and result["description"]:
            result["shortDescription"] = result["description"]
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
        result["alternativeName"] = str(movie_data.get("alternativeName", "") or "")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
        rating_value = movie_data.get("rating", 0)
        if rating_value is None:
            result["rating"] = 0.0
        else:
            try:
                result["rating"] = float(rating_value)
            except (ValueError, TypeError):
                result["rating"] = 0.0
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–µ—Ä–∞
        poster = str(movie_data.get("poster", "") or "")
        if not poster:
            result["poster"] = "/static/default-poster.jpg"
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ—Å—Ç–µ—Ä —Å—Ç—Ä–æ–∫–æ–≤—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Å–ª–æ–≤–∞—Ä—è
            if poster.startswith("{") and poster.endswith("}") and ("'url':" in poster or '"url":' in poster):
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å URL –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–µ—Ä–∞ –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                    import ast
                    import json
                    
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º ast
                    try:
                        poster_dict = json.loads(poster.replace("'", '"'))
                    except:
                        poster_dict = ast.literal_eval(poster)
                        
                    if isinstance(poster_dict, dict):
                        if 'previewUrl' in poster_dict:
                            result["poster"] = poster_dict['previewUrl']
                        elif 'url' in poster_dict:
                            result["poster"] = poster_dict['url']
                        else:
                            result["poster"] = poster
                    else:
                        result["poster"] = poster
                except:
                    result["poster"] = poster
            else:
                result["poster"] = poster
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        result["status"] = str(movie_data.get("status", "") or "")
        result["ageRating"] = str(movie_data.get("ageRating", "") or "")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω
        countries = movie_data.get("countries", "")
        if countries is None:
            result["countries"] = []
        elif isinstance(countries, str):
            country_list = [c for c in countries.split("|") if c]
            result["countries"] = []
            for country in country_list:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–∞–Ω–∞ —Å—Ç—Ä–æ–∫–æ–≤—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Å–ª–æ–≤–∞—Ä—è
                if country.startswith("{") and country.endswith("}") and "'name':" in country:
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è —Å—Ç—Ä–∞–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                        import ast
                        country_dict = ast.literal_eval(country)
                        if isinstance(country_dict, dict) and 'name' in country_dict:
                            result["countries"].append(country_dict['name'])
                        else:
                            result["countries"].append(country)
                    except:
                        result["countries"].append(country)
                else:
                    result["countries"].append(country)
        else:
            result["countries"] = []
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ releaseYear
        try:
            release_year_value = movie_data.get("releaseYear")
            if release_year_value is None or release_year_value == "":
                result["releaseYear"] = result["year"]
            else:
                result["releaseYear"] = int(release_year_value)
        except (ValueError, TypeError):
            result["releaseYear"] = result["year"]
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ isSeries
        is_series_value = movie_data.get("isSeries")
        if is_series_value is None:
            result["isSeries"] = False
        else:
            result["isSeries"] = str(is_series_value) == "1"
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        result["category"] = str(movie_data.get("category", "") or "")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
        result["alternativeName"] = str(movie_data.get("alternativeName", "") or "")
        
        return result

    @redis_error_handler
    def get_movie_by_id(self, movie_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–∏–ª—å–º –∏–∑ Redis –ø–æ ID."""
        if not self.redis_client:
            return None
            
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ —Å—Ç—Ä–æ–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "movie:"
        redis_id = f"movie:{movie_id}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å–º –∏–∑ Redis
        movie_data = self.redis_client.hgetall(redis_id)
        
        if not movie_data:
            return None
            
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis –≤ —Å–ª–æ–≤–∞—Ä—å Python
        movie = self._convert_redis_to_movie(redis_id, movie_data)
        
        return movie
        
    @redis_error_handler
    def get_all_movies(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∏–ª—å–º–æ–≤ –∏–∑ Redis."""
        if not self.redis_client:
            return []
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Ñ–∏–ª—å–º–æ–≤ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "movie:"
        movie_keys = self.redis_client.keys("movie:*")
        
        if not movie_keys:
            return []
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å–º–∞
        movies = []
        for key in movie_keys:
            movie_data = self.redis_client.hgetall(key)
            if movie_data:
                movie = self._convert_redis_to_movie(key, movie_data)
                movies.append(movie)
                
        return movies

    @redis_error_handler
    def get_all_genres(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∂–∞–Ω—Ä–æ–≤ –∏–∑ Redis."""
        if not self.redis_client:
            print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return []
            
        genre_keys = self.redis_client.keys("genre:*") or []
        genres = []
        
        for key in genre_keys:
            if key and isinstance(key, str):
                parts = key.split(":")
                if len(parts) > 1 and parts[1]:
                    genres.append(parts[1].capitalize())
        
        return sorted(genres)

    @redis_error_handler
    def get_all_countries(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω –∏–∑ Redis."""
        if not self.redis_client:
            print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return []
            
        country_keys = self.redis_client.keys("country:*") or []
        countries = []
        
        for key in country_keys:
            if key and isinstance(key, str):
                parts = key.split(":")
                if len(parts) > 1 and parts[1]:
                    countries.append(parts[1].capitalize())
        
        return sorted(countries)

    @redis_error_handler
    def get_all_categories(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ Redis."""
        if not self.redis_client:
            print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return []
            
        category_keys = self.redis_client.keys("category:*") or []
        categories = []
        
        for key in category_keys:
            if key and isinstance(key, str):
                parts = key.split(":")
                if len(parts) > 1 and parts[1]:
                    categories.append(parts[1].capitalize())
        
        return sorted(categories)

    @redis_error_handler
    def flush_db(self):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –±–∞–∑—É Redis."""
        if not self.redis_client:
            print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return False
            
        self.redis_client.flushdb()
        print("üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Redis –æ—á–∏—â–µ–Ω–∞!")
        return True
        
    @redis_error_handler
    def load_from_mongodb(self, mongo_client):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ MongoDB –≤ Redis."""
        if not self.redis_client:
            print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return 0
            
        print("üîÑ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB –≤ Redis...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å–º—ã –∏–∑ MongoDB
        movies = mongo_client.get_movies()
        
        if not movies:
            print("‚ö†Ô∏è –í MongoDB –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏!")
            return 0
            
        # –û—á–∏—â–∞–µ–º Redis –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        self.flush_db()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Redis
        saved_count = self.save_movies_bulk(movies)
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {saved_count} —Ñ–∏–ª—å–º–æ–≤ –∏–∑ MongoDB –≤ Redis.")
        return saved_count

    @redis_error_handler
    def like_movie(self, user_id, movie_id):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∏–ª—å–º –≤ —Å–ø–∏—Å–æ–∫ –ª–∞–π–∫–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
        if not self.redis_client:
            print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return False
            
        if movie_id is None or movie_id == '':
            print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π ID —Ñ–∏–ª—å–º–∞")
            return False
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ ID –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ –ø–æ–∏—Å–∫–∞
        original_movie_id = str(movie_id)
        
        # –ï—Å–ª–∏ ID –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "movie:", –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Redis
        if not str(movie_id).startswith("movie:"):
            redis_id = f"movie:{movie_id}"
        else:
            redis_id = str(movie_id)
            movie_id = movie_id.replace("movie:", "")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∏–ª—å–º
        if not self.redis_client.exists(redis_id):
            print(f"‚ö†Ô∏è –§–∏–ª—å–º —Å ID {redis_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis –Ω–∞–ø—Ä—è–º—É—é")
            
            # –ï—Å–ª–∏ ID –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "temp_", —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é (FAISS)
            if str(original_movie_id).startswith("temp_") or str(movie_id).startswith("temp_"):
                # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ñ–∏–ª—å–º–∞ –∏–∑ FAISS
                print(f"‚ö†Ô∏è –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ñ–∏–ª—å–º–∞ —Å ID {redis_id}")
                movie_name = original_movie_id.replace("temp_", "").replace("_", " ")
                if movie_name.startswith("movie:"):
                    movie_name = movie_name.replace("movie:", "")
                self.redis_client.hset(redis_id, "name", movie_name)
                self.redis_client.hset(redis_id, "year", "2023")
            else:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º –ø–æ –¥—Ä—É–≥–∏–º —Ñ–æ—Ä–º–∞—Ç–∞–º ID
                # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ ID —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º —Å —Ç–∞–∫–∏–º ID
                if original_movie_id.isdigit():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∏–ª—å–º—ã —Å ID, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —ç—Ç–∏ —Ü–∏—Ñ—Ä—ã
                    matching_keys = self.redis_client.keys(f"movie:*{original_movie_id}*")
                    if matching_keys:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–ª—é—á
                        redis_id = matching_keys[0].decode('utf-8') if isinstance(matching_keys[0], bytes) else matching_keys[0]
                        movie_id = redis_id.replace("movie:", "")
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∏–ª—å–º —Å –ø–æ—Ö–æ–∂–∏–º ID: {redis_id}")
                    else:
                        # –ï—Å–ª–∏ —Ñ–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                        print(f"‚ö†Ô∏è –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ñ–∏–ª—å–º–∞ —Å ID {redis_id}")
                        self.redis_client.hset(redis_id, "name", f"–§–∏–ª—å–º {original_movie_id}")
                        self.redis_client.hset(redis_id, "year", "2023")
                else:
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ñ–∏–ª—å–º–∞
                    print(f"‚ö†Ô∏è –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ñ–∏–ª—å–º–∞ —Å ID {redis_id}")
                    self.redis_client.hset(redis_id, "name", f"–§–∏–ª—å–º {original_movie_id}")
                    self.redis_client.hset(redis_id, "year", "2023")
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å–º –≤ —Å–ø–∏—Å–æ–∫ –ª–∞–π–∫–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        user_likes_key = f"user:{user_id}:likes"
        self.redis_client.sadd(user_likes_key, movie_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö, –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª —Ñ–∏–ª—å–º
        movie_likes_key = f"{redis_id}:liked_by"
        self.redis_client.sadd(movie_likes_key, user_id)
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ª–∞–π–∫–Ω—É–ª —Ñ–∏–ª—å–º {movie_id}")
        return True
        
    @redis_error_handler
    def unlike_movie(self, user_id, movie_id):
        """–£–¥–∞–ª—è–µ—Ç —Ñ–∏–ª—å–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ª–∞–π–∫–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
        if not self.redis_client:
            print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return False
            
        if movie_id is None or movie_id == '':
            print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π ID —Ñ–∏–ª—å–º–∞")
            return False
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ ID –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ –ø–æ–∏—Å–∫–∞
        original_movie_id = str(movie_id)
            
        # –ï—Å–ª–∏ ID –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "movie:", —É–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
        if str(movie_id).startswith("movie:"):
            movie_id = str(movie_id).replace("movie:", "")
            redis_id = f"movie:{movie_id}"
        else:
            redis_id = f"movie:{movie_id}"
            
        # –£–¥–∞–ª—è–µ–º —Ñ–∏–ª—å–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ª–∞–π–∫–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        user_likes_key = f"user:{user_id}:likes"
        self.redis_client.srem(user_likes_key, movie_id)
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–µ—Ö, –∫—Ç–æ –ª–∞–π–∫–Ω—É–ª —Ñ–∏–ª—å–º
        movie_likes_key = f"{redis_id}:liked_by"
        self.redis_client.srem(movie_likes_key, user_id)
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª –ª–∞–π–∫ —Ñ–∏–ª—å–º–∞ {movie_id}")
        return True
        
    @redis_error_handler
    def get_user_liked_movies(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤, –ª–∞–π–∫–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
        if not self.redis_client:
            print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return []
            
        # –ü–æ–ª—É—á–∞–µ–º ID –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ñ–∏–ª—å–º–æ–≤
        user_likes_key = f"user:{user_id}:likes"
        movie_ids = self.redis_client.smembers(user_likes_key)
        
        if not movie_ids:
            return []
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–æ–≤
        movies = []
        for movie_id in movie_ids:
            movie = self.get_movie_by_id(movie_id)
            if movie:
                movies.append(movie)
                
        return movies
        
    @redis_error_handler
    def is_movie_liked(self, user_id, movie_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ª–∞–π–∫–Ω—É–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–∏–ª—å–º."""
        if not self.redis_client:
            print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return False
            
        if movie_id is None or movie_id == '':
            print("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π ID —Ñ–∏–ª—å–º–∞")
            return False
            
        # –ï—Å–ª–∏ ID –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "movie:", —É–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
        if str(movie_id).startswith("movie:"):
            movie_id = str(movie_id).replace("movie:", "")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∏–ª—å–º –≤ —Å–ø–∏—Å–∫–µ –ª–∞–π–∫–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        user_likes_key = f"user:{user_id}:likes"
        return self.redis_client.sismember(user_likes_key, movie_id)
        
    @redis_error_handler
    def remove_all_likes(self, user_id):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ª–∞–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if not self.redis_client:
            print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return False
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ñ–∏–ª—å–º–æ–≤
            user_likes_key = f"user:{user_id}:likes"
            liked_movie_ids = self.redis_client.smembers(user_likes_key)
            
            if not liked_movie_ids:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ –ª–∞–π–∫–∞–ª, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True
                return True
                
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Ñ–∏–ª—å–º–∞–º–∏ (–ª–∞–π–∫–∏)
            pipeline = self.redis_client.pipeline()
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ –ª–∞–π–∫–∞—Ö –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ª–∞–π–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            pipeline.delete(user_likes_key)
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ –ª–∞–π–∫–∞—Ö –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤ –ª–∞–π–∫–æ–≤ —Ñ–∏–ª—å–º–æ–≤
            for movie_id in liked_movie_ids:
                movie_likes_key = f"movie:{movie_id}:likes"
                pipeline.srem(movie_likes_key, user_id)
                
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            pipeline.execute()
            
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ª–∞–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –ª–∞–π–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
            return False
        
    @redis_error_handler
    def get_recommendations(self, liked_movie_ids, limit=10):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ñ–∏–ª—å–º–æ–≤.
        
        :param liked_movie_ids: –°–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ñ–∏–ª—å–º–æ–≤
        :param limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        :return: –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
        """
        if not self.redis_client:
            print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return []
            
        if not liked_movie_ids:
            # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            print("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –ø—É—Å—Ç, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è")
            return []
            
        # –°–æ–±–∏—Ä–∞–µ–º –∂–∞–Ω—Ä—ã –∏ –≥–æ–¥—ã –ª–∞–π–∫–Ω—É—Ç—ã—Ö —Ñ–∏–ª—å–º–æ–≤
        genres = set()
        years = set()
        
        for movie_id in liked_movie_ids:
            movie = self.get_movie_by_id(movie_id)
            if not movie:
                continue
                
            # –°–æ–±–∏—Ä–∞–µ–º –∂–∞–Ω—Ä—ã
            if "genres" in movie:
                if isinstance(movie["genres"], list):
                    for genre in movie["genres"]:
                        genres.add(genre.lower())
                elif isinstance(movie["genres"], str):
                    for genre in movie["genres"].split("|"):
                        if genre:
                            genres.add(genre.lower())
                            
            # –°–æ–±–∏—Ä–∞–µ–º –≥–æ–¥—ã
            if "year" in movie:
                years.add(str(movie["year"]))
                
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å–º—ã –ø–æ –∂–∞–Ω—Ä–∞–º –∏ –≥–æ–¥–∞–º
        movie_keys = set()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å–º—ã –ø–æ –∂–∞–Ω—Ä–∞–º
        for genre in genres:
            genre_keys = self.redis_client.smembers(f"genre:{genre}") or set()
            movie_keys.update(genre_keys)
            
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å–º—ã –ø–æ –≥–æ–¥–∞–º
        for year in years:
            year_keys = self.redis_client.smembers(f"year:{year}") or set()
            movie_keys.update(year_keys)
            
        # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –ª–∞–π–∫–Ω—É—Ç—ã–µ —Ñ–∏–ª—å–º—ã
        liked_movie_keys = {f"movie:{movie_id}" for movie_id in liked_movie_ids}
        movie_keys = movie_keys - liked_movie_keys
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã
        if not movie_keys:
            return self.get_popular_movies(limit)
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–æ–≤
        recommendations = []
        for key in movie_keys:
            movie_id = key.replace("movie:", "")
            movie = self.get_movie_by_id(movie_id)
            if movie:
                recommendations.append(movie)
                
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        def get_rating(movie):
            rating = movie.get("rating", 0)
            if isinstance(rating, dict) and "kp" in rating:
                return rating["kp"]
            elif isinstance(rating, (int, float)):
                return rating
            else:
                try:
                    return float(rating)
                except (ValueError, TypeError):
                    return 0
        
        recommendations.sort(key=get_rating, reverse=True)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        return recommendations[:limit]
        
    @redis_error_handler
    def get_popular_movies(self, limit=10):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã."""
        if not self.redis_client:
            print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return []
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å–º—ã
        movie_keys = self.redis_client.keys("movie:*")
        
        if not movie_keys:
            return []
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–æ–≤
        movies = []
        for key in movie_keys:
            movie_id = key.replace("movie:", "")
            movie = self.get_movie_by_id(movie_id)
            if movie:
                movies.append(movie)
                
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        movies.sort(key=lambda x: x.get("rating", 0), reverse=True)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤
        return movies[:limit]

    @redis_error_handler
    def add_movie_comment(self, user_id, movie_id, comment_text):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–∏–ª—å–º—É."""
        if not self.redis_client:
            print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return False
            
        if not user_id or not movie_id or not comment_text:
            print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
            return False
            
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ ID –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ –ø–æ–∏—Å–∫–∞
            if not str(movie_id).startswith("movie:"):
                redis_id = f"movie:{movie_id}"
            else:
                redis_id = str(movie_id)
                movie_id = movie_id.replace("movie:", "")
                
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            comment_id = self.redis_client.incr(f"next_comment_id")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            comment_data = {
                "id": comment_id,
                "user_id": user_id,
                "movie_id": movie_id,
                "text": comment_text,
                "created_at": int(time.time())
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            comment_key = f"comment:{comment_id}"
            self.redis_client.hset(comment_key, mapping=comment_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Ñ–∏–ª—å–º—É
            self.redis_client.zadd(f"{redis_id}:comments", {comment_id: int(time.time())})
            
            # –î–æ–±–∞–≤–ª—è–µ–º ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.redis_client.zadd(f"user:{user_id}:comments", {comment_id: int(time.time())})
            
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–∏–ª—å–º—É {movie_id}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {str(e)}")
            return False
            
    @redis_error_handler
    def get_movie_comments(self, movie_id, count=20):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Ñ–∏–ª—å–º—É."""
        if not self.redis_client:
            print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return []
            
        if not movie_id:
            print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ñ–∏–ª—å–º–∞")
            return []
            
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ ID –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ –ø–æ–∏—Å–∫–∞
            if not str(movie_id).startswith("movie:"):
                redis_id = f"movie:{movie_id}"
            else:
                redis_id = str(movie_id)
                
            # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Ñ–∏–ª—å–º—É (—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
            comment_ids = self.redis_client.zrevrange(f"{redis_id}:comments", 0, count - 1)
            
            comments = []
            for comment_id in comment_ids:
                comment_data = self.redis_client.hgetall(f"comment:{comment_id}")
                if comment_data:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏
                    user_id = comment_data.get("user_id")
                    user_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"  # –ò–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                    created_at = int(comment_data.get("created_at", 0))
                    formatted_date = time.strftime("%d.%m.%Y %H:%M", time.localtime(created_at))
                    
                    comments.append({
                        "id": comment_data.get("id"),
                        "user_id": user_id,
                        "user": user_name,
                        "text": comment_data.get("text", ""),
                        "date": formatted_date,
                        "created_at": created_at
                    })
            
            return comments
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {str(e)}")
            return []
            
    @redis_error_handler
    def rate_movie(self, user_id, movie_id, rating):
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ñ–∏–ª—å–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
        if not self.redis_client:
            print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return False
            
        if not user_id or not movie_id:
            print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ñ–∏–ª—å–º–∞")
            return False
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∞ (–æ—Ç 1 –¥–æ 5)
            rating = int(rating)
            if rating < 1 or rating > 5:
                print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating}. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5.")
                return False
                
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ ID –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ –ø–æ–∏—Å–∫–∞
            if not str(movie_id).startswith("movie:"):
                redis_id = f"movie:{movie_id}"
            else:
                redis_id = str(movie_id)
                movie_id = movie_id.replace("movie:", "")
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å–º–∞
            user_rating_key = f"user:{user_id}:ratings"
            self.redis_client.hset(user_rating_key, movie_id, rating)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —Ñ–∏–ª—å–º–∞
            movie_ratings_key = f"{redis_id}:ratings"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Å–ø–∏—Å–æ–∫ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
            self.redis_client.hset(movie_ratings_key, user_id, rating)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
            all_ratings = self.redis_client.hvals(movie_ratings_key)
            if all_ratings:
                avg_rating = sum(float(r) for r in all_ratings) / len(all_ratings)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≤ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–∞
                self.redis_client.hset(redis_id, "user_rating", f"{avg_rating:.1f}")
                
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ü–µ–Ω–∏–ª —Ñ–∏–ª—å–º {movie_id} –Ω–∞ {rating}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —Ñ–∏–ª—å–º–∞: {str(e)}")
            return False
            
    @redis_error_handler
    def get_user_movie_rating(self, user_id, movie_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å–º–∞."""
        if not self.redis_client:
            print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return None
            
        if not user_id or not movie_id:
            print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏")
            return None
            
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ ID
            if str(movie_id).startswith("movie:"):
                movie_id = movie_id.replace("movie:", "")
                
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å–º–∞
            user_rating_key = f"user:{user_id}:ratings"
            rating = self.redis_client.hget(user_rating_key, movie_id)
            
            if rating:
                return int(rating)
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏: {str(e)}")
            return None
            
    @redis_error_handler
    def get_movie_avg_rating(self, movie_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ñ–∏–ª—å–º–∞."""
        if not self.redis_client:
            print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return 0
            
        if not movie_id:
            print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ñ–∏–ª—å–º–∞")
            return 0
            
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ ID
            if not str(movie_id).startswith("movie:"):
                redis_id = f"movie:{movie_id}"
            else:
                redis_id = str(movie_id)
                
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
            saved_rating = self.redis_client.hget(redis_id, "user_rating")
            if saved_rating:
                return float(saved_rating)
                
            # –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–µ—Ç, –≤—ã—á–∏—Å–ª—è–µ–º
            movie_ratings_key = f"{redis_id}:ratings"
            all_ratings = self.redis_client.hvals(movie_ratings_key)
            
            if all_ratings:
                avg_rating = sum(float(r) for r in all_ratings) / len(all_ratings)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                self.redis_client.hset(redis_id, "user_rating", f"{avg_rating:.1f}")
                return avg_rating
            
            return 0
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞: {str(e)}")
            return 0
            
    @redis_error_handler
    def get_similar_movies(self, movie_id, count=6):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ö–æ–∂–∏–µ —Ñ–∏–ª—å–º—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞."""
        if not self.redis_client:
            print("‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return []
            
        if not movie_id:
            print("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ñ–∏–ª—å–º–∞")
            return []
            
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ ID
            if not str(movie_id).startswith("movie:"):
                redis_id = f"movie:{movie_id}"
            else:
                redis_id = str(movie_id)
                movie_id = movie_id.replace("movie:", "")
                
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∏–ª—å–º–∞
            movie_data = self.redis_client.hgetall(redis_id)
            if not movie_data:
                print(f"‚ö†Ô∏è –§–∏–ª—å–º —Å ID {redis_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return []
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∂–∞–Ω—Ä—ã —Ñ–∏–ª—å–º–∞
            genres = movie_data.get("genres", "").split("|") if movie_data.get("genres") else []
            year = movie_data.get("year")
            
            similar_movie_keys = set()
            
            # –ò—â–µ–º —Ñ–∏–ª—å–º—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∂–∞–Ω—Ä–∞–º–∏
            for genre in genres:
                if not genre:
                    continue
                genre_keys = self.redis_client.smembers(f"genre:{genre.lower()}")
                similar_movie_keys.update(genre_keys)
                
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö
            similar_movie_keys.discard(redis_id)
            
            # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –±–µ—Ä–µ–º —Ñ–∏–ª—å–º—ã –∏–∑ —Ç–æ–≥–æ –∂–µ –≥–æ–¥–∞
            if not similar_movie_keys and year:
                year_keys = self.redis_client.smembers(f"year:{year}")
                similar_movie_keys.update(year_keys)
                similar_movie_keys.discard(redis_id)
                
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –ø—É—Å—Ç–æ, –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ñ–∏–ª—å–º—ã
            if not similar_movie_keys:
                all_keys = list(self.redis_client.keys("movie:*"))
                all_keys.remove(redis_id) if redis_id in all_keys else None
                import random
                random.shuffle(all_keys)
                similar_movie_keys = set(all_keys[:min(count, len(all_keys))])
                
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ –≤ –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–æ–≤
            similar_movies = []
            for key in list(similar_movie_keys)[:count]:
                movie = self._prepare_movie_for_client(key, self.redis_client.hgetall(key))
                if movie:
                    similar_movies.append(movie)
                    
            return similar_movies
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤: {str(e)}")
            return []
