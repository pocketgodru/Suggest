#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö MongoDB –∏–∑ —Ñ–∞–π–ª–∞ movie.json.
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏.
"""
import json
import os
import sys
import time
from pymongo import MongoClient
from pymongo.errors import ConnectionFailure, ServerSelectionTimeoutError

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ MongoDB –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
MONGO_URI = os.getenv("MONGO_URI", "mongodb://mongodb:27017")
MONGO_DB = os.getenv("MONGO_DB", "movies_db")
MONGO_COLLECTION = os.getenv("MONGO_COLLECTION", "movies")
JSON_PATH = os.getenv("MOVIE_JSON_PATH", "/app/movie.json")
BATCH_SIZE = 1000  # –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö

def main():
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ {JSON_PATH}")
    
    # –ñ–¥–µ–º, –ø–æ–∫–∞ MongoDB —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π
    client = None
    max_attempts = 10
    attempts = 0
    
    while attempts < max_attempts:
        try:
            client = MongoClient(MONGO_URI, serverSelectionTimeoutMS=5000)
            client.admin.command('ping')
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB")
            break
        except (ConnectionFailure, ServerSelectionTimeoutError) as e:
            attempts += 1
            print(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempts}/{max_attempts} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB... ({str(e)})")
            time.sleep(3)
    
    if attempts == max_attempts:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB")
        sys.exit(1)
    
    db = client[MONGO_DB]
    collection = db[MONGO_COLLECTION]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    count = collection.count_documents({})
    if count > 0:
        print(f"‚ÑπÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç {count} —Ñ–∏–ª—å–º–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ movie.json
    if not os.path.exists(JSON_PATH):
        print(f"‚ùå –§–∞–π–ª {JSON_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file_size = os.path.getsize(JSON_PATH)
    print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ {JSON_PATH}: {file_size / (1024 * 1024):.2f} –ú–ë")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
    print(f"üìù –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {JSON_PATH}...")
    
    try:
        # –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –º–∞—Å—Å–∏–≤–æ–º –æ–±—ä–µ–∫—Ç–æ–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        with open(JSON_PATH, 'r', encoding='utf-8') as f:
            first_char = f.read(1).strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if first_char == '[':
            process_array_format(JSON_PATH, collection, file_size)
        elif first_char == '{':
            process_category_format(JSON_PATH, collection, file_size)
        else:
            print("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
            sys.exit(1)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        if collection.count_documents({}) == 0:
            test_movies = [
                {"name": "–ü—Ä–∏–º–µ—Ä —Ñ–∏–ª—å–º–∞ 1", "year": 2022, "genres": ["–¥—Ä–∞–º–∞", "–∫–æ–º–µ–¥–∏—è"], "category": "—Ñ–∏–ª—å–º"},
                {"name": "–ü—Ä–∏–º–µ—Ä —Ñ–∏–ª—å–º–∞ 2", "year": 2021, "genres": ["–±–æ–µ–≤–∏–∫", "—Ç—Ä–∏–ª–ª–µ—Ä"], "category": "—Ñ–∏–ª—å–º"},
                {"name": "–ü—Ä–∏–º–µ—Ä —Ñ–∏–ª—å–º–∞ 3", "year": 2020, "genres": ["—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"], "category": "—Ñ–∏–ª—å–º"}
            ]
            collection.insert_many(test_movies)
            print(f"‚ö†Ô∏è –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
        
        sys.exit(1)

def process_array_format(file_path, collection, file_size):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∞—Å—Å–∏–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤ JSON"""
    print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–∞—Å—Å–∏–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤...")
    
    with open(file_path, 'r', encoding='utf-8') as f:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª '['
        f.read(1)
        
        buffer = ""
        open_braces = 0
        in_string = False
        escape_next = False
        
        batch = []
        total_inserted = 0
        char_count = 0
        progress_interval = file_size // 10  # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö...")
        while True:
            char = f.read(1)
            if not char:  # –ö–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
                break
            
            char_count += 1
            if char_count % progress_interval == 0:
                progress_percent = (char_count / file_size) * 100
                print(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {progress_percent:.2f}% —Ñ–∞–π–ª–∞...")
            
            buffer += char
            
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫ –∏ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            if escape_next:
                escape_next = False
                continue
            
            if char == '\\':
                escape_next = True
                continue
            
            if char == '"' and not escape_next:
                in_string = not in_string
                continue
            
            if in_string:
                continue
            
            if char == '{':
                open_braces += 1
            elif char == '}':
                open_braces -= 1
                if open_braces == 0:  # –ù–∞–π–¥–µ–Ω –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç
                    try:
                        movie_obj = json.loads(buffer)
                        batch.append(movie_obj)
                        
                        # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç BATCH_SIZE
                        if len(batch) >= BATCH_SIZE:
                            collection.insert_many(batch)
                            total_inserted += len(batch)
                            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {total_inserted} —Ñ–∏–ª—å–º–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                            batch = []
                        
                        # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                        buffer = ""
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—è—Ç—É—é –∏ –ø—Ä–æ–±–µ–ª—ã
                        next_char = f.read(1)
                        while next_char in [',', ' ', '\n', '\r', '\t']:
                            next_char = f.read(1)
                        
                        # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —Å–∏–º–≤–æ–ª –Ω–µ –∑–∞–ø—è—Ç–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞–∑–∞–¥
                        if next_char and next_char not in [',', ' ', '\n', '\r', '\t', ']']:
                            f.seek(f.tell() - 1)
                        
                    except json.JSONDecodeError as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞: {str(e)}")
                        buffer = ""
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–±—ä–µ–∫—Ç—ã
        if batch:
            collection.insert_many(batch)
            total_inserted += len(batch)
        
        print(f"‚úÖ –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {total_inserted} —Ñ–∏–ª—å–º–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")

def process_category_format(file_path, collection, file_size):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–±—ä–µ–∫—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –æ–±—ä–µ–∫—Ç–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏...")
    
    try:
        # –ò–∑-–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞, –º—ã –Ω–µ –º–æ–∂–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–≥–æ –ø–æ—Å–∏–º–≤–æ–ª—å–Ω–æ
        # –ë—É–¥–µ–º –¥–µ–ª–∞—Ç—å —ç—Ç–æ –ø–æ —á–∞—Å—Ç—è–º, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–æ–≤–∞—Ä—å Python
        with open(file_path, 'r', encoding='utf-8') as f:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ—Å—É—Ä—Å–æ–µ–º–∫–æ)
            print("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç—å...")
            data = json.load(f)
        
        total_inserted = 0
        batch = []
        categories = list(data.keys())
        total_categories = len(categories)
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ {total_categories} –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {', '.join(categories)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        for i, category in enumerate(categories):
            print(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} ({i+1}/{total_categories})...")
            movies = data[category]
            
            for movie in movies:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫ —Ñ–∏–ª—å–º—É
                movie['category'] = category
                
                batch.append(movie)
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç BATCH_SIZE
                if len(batch) >= BATCH_SIZE:
                    collection.insert_many(batch)
                    total_inserted += len(batch)
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {total_inserted} —Ñ–∏–ª—å–º–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                    batch = []
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–±—ä–µ–∫—Ç—ã
        if batch:
            collection.insert_many(batch)
            total_inserted += len(batch)
        
        print(f"‚úÖ –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {total_inserted} —Ñ–∏–ª—å–º–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON: {str(e)}")
        print(f"‚ö†Ô∏è –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π...")
        process_category_format_streaming(file_path, collection, file_size)
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}")
        raise

def process_category_format_streaming(file_path, collection, file_size):
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –º–µ–Ω—å—à–∏–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏"""
    print("üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —Ñ–∞–π–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
    
    import ijson  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –ø–∞–∫–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    
    total_inserted = 0
    batch = []
    
    try:
        with open(file_path, 'rb') as f:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ—Ä–Ω–µ–≤–æ–º –æ–±—ä–µ–∫—Ç–µ
            parser = ijson.kvitems(f, '')
            
            for category, movies in parser:
                print(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}...")
                
                for movie in movies:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫ —Ñ–∏–ª—å–º—É
                    movie['category'] = category
                    
                    batch.append(movie)
                    
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç BATCH_SIZE
                    if len(batch) >= BATCH_SIZE:
                        collection.insert_many(batch)
                        total_inserted += len(batch)
                        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {total_inserted} —Ñ–∏–ª—å–º–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                        batch = []
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–±—ä–µ–∫—Ç—ã
            if batch:
                collection.insert_many(batch)
                total_inserted += len(batch)
            
            print(f"‚úÖ –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {total_inserted} —Ñ–∏–ª—å–º–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}")
        
        if 'ijson' in str(e):
            print("‚ö†Ô∏è –ú–æ–¥—É–ª—å ijson –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            test_movies = [
                {"name": "–ü—Ä–∏–º–µ—Ä —Ñ–∏–ª—å–º–∞ 1", "year": 2022, "genres": ["–¥—Ä–∞–º–∞", "–∫–æ–º–µ–¥–∏—è"], "category": "—Ñ–∏–ª—å–º"},
                {"name": "–ü—Ä–∏–º–µ—Ä —Ñ–∏–ª—å–º–∞ 2", "year": 2021, "genres": ["–±–æ–µ–≤–∏–∫", "—Ç—Ä–∏–ª–ª–µ—Ä"], "category": "—Ñ–∏–ª—å–º"},
                {"name": "–ü—Ä–∏–º–µ—Ä —Ñ–∏–ª—å–º–∞ 3", "year": 2020, "genres": ["—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"], "category": "—Ñ–∏–ª—å–º"}
            ]
            collection.insert_many(test_movies)
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
        
        raise

if __name__ == "__main__":
    main() 